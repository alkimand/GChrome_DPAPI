<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PInvoke.AdvApi32</name>
    </assembly>
    <members>
        <member name="T:PInvoke.AdvApi32">
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ALG_ID"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.CryptAcquireContextFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.CryptCreateHashFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.CryptGetHashParamFlags"/> nested type.
            </content>
            <content>Contains the <see cref="T:PInvoke.AdvApi32.CryptGetProvParamQuery" /> nested type.</content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.CryptHashDataFlags"/> nested type.
            </content>
            <content>Contains the <see cref="T:PInvoke.AdvApi32.CryptSetProvParamQuery" /> nested type.</content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ProviderType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.RegNotifyFilter"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.RegOpenKeyOptions"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SafeCryptographicProviderHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SafeHashHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SafeServiceHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SC_ACTION"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SC_ACTION_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SC_STATUS_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceAccess"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceControl"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceDelayedAutoStartInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceDescription"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceErrorControl"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceInfoLevel"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceLaunchProtected"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceLaunchProtectedInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceManagerAccess"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServicePreferredNodeInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServicePreshutdownInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceRequiredPrivilegesInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceSidInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceSidType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceStartType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceState"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceStateQuery"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceTrigger"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceTriggerAction"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceTriggerDataType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceTriggerInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceTriggerType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.ServiceType"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS_Flags"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.TokenAccessRights"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref="T:PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS"/> nested type.
            </content>
            <content>
            Exported functions from the AdvApi32.dll Windows library
            that are available to Desktop apps only.
            </content>
            <content>
            Exported functions from the AdvApi32.dll Windows library
            that are available to Desktop apps only.
            </content>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
            <content>
            Contains the specific <see cref="T:PInvoke.Kernel32.ACCESS_MASK"/> for registry keys.
            </content>
            <content>
            Contains the special reserved registry key handles.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ALG_ID"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.CryptAcquireContextFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.CryptCreateHashFlags"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.CryptGetHashParamFlags"/> nested type.
            </content>
            <content>Contains the <see cref = "T:PInvoke.AdvApi32.CryptGetProvParamQuery"/> nested type.</content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.CryptHashDataFlags"/> nested type.
            </content>
            <content>Contains the <see cref = "T:PInvoke.AdvApi32.CryptSetProvParamQuery"/> nested type.</content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ProviderType"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.RegNotifyFilter"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.RegOpenKeyOptions"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SafeCryptographicProviderHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SafeHashHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SafeServiceHandle"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SC_ACTION"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SC_ACTION_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SC_STATUS_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceAccess"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceControl"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceDelayedAutoStartInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceDescription"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceErrorControl"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceInfoLevel"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceLaunchProtected"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceLaunchProtectedInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceManagerAccess"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServicePreferredNodeInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServicePreshutdownInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceRequiredPrivilegesInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceSidInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceSidType"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceStartType"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceState"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceStateQuery"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceTrigger"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceTriggerAction"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceTriggerDataType"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceTriggerInfo"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceTriggerType"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.ServiceType"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SERVICE_STATUS"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS_Flags"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.TokenAccessRights"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE"/> nested type.
            </content>
            <content>
            Contains the <see cref = "T:PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS"/> nested type.
            </content>
            <content>
            Exported functions from the AdvApi32.dll Windows library
            that are available to Desktop apps only.
            </content>
            <content>
            Exported functions from the AdvApi32.dll Windows library
            that are available to Desktop apps only.
            </content>
            <content>
            Methods and nested types that are not strictly P/Invokes but provide
            a slightly higher level of functionality to ease calling into native code.
            </content>
            <content>
            Contains the specific <see cref = "T:PInvoke.Kernel32.ACCESS_MASK"/> for registry keys.
            </content>
            <content>
            Contains the special reserved registry key handles.
            </content>
        </member>
        <member name="T:PInvoke.AdvApi32.ALG_ID">
            <summary>
                Hashing Algorithms
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.CryptAcquireContextFlags">
            <summary>
            Flags for the <see cref="M:PInvoke.AdvApi32.CryptAcquireContext(PInvoke.AdvApi32.SafeCryptographicProviderHandle@,System.String,System.String,PInvoke.AdvApi32.ProviderType,PInvoke.AdvApi32.CryptAcquireContextFlags)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.CRYPT_VERIFYCONTEXT">
            <summary>
            This option is intended for applications that are using ephemeral keys, or applications that do not require access to persisted private keys, such as applications that perform only hashing, encryption, and digital signature verification. Only applications that create signatures or decrypt messages need access to a private key. In most cases, this flag should be set.
            See Microsoft online documentation for more information.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.CRYPT_NEWKEYSET">
            <summary>
            Creates a new key container with the name specified by pszContainer. If pszContainer is NULL, a key container with the default name is created.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.CRYPT_DELETEKEYSET">
            <summary>
            Delete the key container specified by pszContainer. If pszContainer is NULL, the key container with the default name is deleted. All key pairs in the key container are also destroyed.
            When this flag is set, the value returned in phProv is undefined, and thus, the CryptReleaseContext function need not be called afterward.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.CRYPT_MACHINE_KEYSET">
            <summary>
            By default, keys and key containers are stored as user keys. For Base Providers, this means that user key containers are stored in the user's profile. A key container created without this flag by an administrator can be accessed only by the user creating the key container and a user with administration privileges.
            See Microsoft online documentation for more information.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.CRYPT_SILENT">
            <summary>
            The application requests that the CSP not display any user interface (UI) for this context. If the CSP must display the UI to operate, the call fails and the NTE_SILENT_CONTEXT error code is set as the last error. In addition, if calls are made to CryptGenKey with the CRYPT_USER_PROTECTED flag with a context that has been acquired with the CRYPT_SILENT flag, the calls fail and the CSP sets NTE_SILENT_CONTEXT.
            CRYPT_SILENT is intended for use with applications for which the UI cannot be displayed by the CSP.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptAcquireContextFlags.CRYPT_DEFAULT_CONTAINER_OPTIONAL">
            <summary>
            Obtains a context for a smart card CSP that can be used for hashing and symmetric key operations but cannot be used for any operation that requires authentication to a smart card using a PIN. This type of context is most often used to perform operations on an empty smart card, such as setting the PIN by using CryptSetProvParam. This flag can only be used with smart card CSPs.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.CryptCreateHashFlags">
            <summary>
            Flags for the <see cref="M:PInvoke.AdvApi32.CryptCreateHash(PInvoke.AdvApi32.SafeCryptographicProviderHandle,PInvoke.AdvApi32.ALG_ID,PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptCreateHashFlags,PInvoke.AdvApi32.SafeHashHandle@)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptCreateHashFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptCreateHashFlags.CRYPT_SECRETDIGEST">
            <summary>
            This flag is not used.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.CryptGetHashParamFlags">
            <summary>
            Flags for passing to the <see cref="M:PInvoke.AdvApi32.CryptGetHashParam(PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptGetHashParamFlags,System.Byte*,System.Int32*,System.UInt32)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptGetHashParamFlags.HP_ALGID">
            <summary>
            An <see cref="T:PInvoke.AdvApi32.ALG_ID"/> that indicates the algorithm specified when the hash object was created. For a list of hash algorithms, see <see cref="M:PInvoke.AdvApi32.CryptCreateHash(PInvoke.AdvApi32.SafeCryptographicProviderHandle,PInvoke.AdvApi32.ALG_ID,PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptCreateHashFlags,PInvoke.AdvApi32.SafeHashHandle@)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptGetHashParamFlags.HP_HASHVAL">
            <summary>
            The hash value or message hash for the hash object specified by hHash. This value is generated based on the data supplied to the hash object earlier through the <see cref="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> and CryptHashSessionKey functions.
            The <see cref="M:PInvoke.AdvApi32.CryptGetHashParam(PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptGetHashParamFlags,System.Byte*,System.Int32*,System.UInt32)"/> function completes the hash. After <see cref="M:PInvoke.AdvApi32.CryptGetHashParam(PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptGetHashParamFlags,System.Byte*,System.Int32*,System.UInt32)"/> has been called, no more data can be added to the hash. Additional calls to <see cref="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> or CryptHashSessionKey fail. After the application is done with the hash, <see cref="M:PInvoke.AdvApi32.CryptDestroyHash(System.IntPtr)"/> should be called to destroy the hash object.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptGetHashParamFlags.HP_HASHSIZE">
            <summary>
            DWORD value indicating the number of bytes in the hash value. This value will vary depending on the hash algorithm. Applications must retrieve this value just before the HP_HASHVAL value so the correct amount of memory can be allocated.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.CryptGetProvParamQuery">
            <summary>
            Defines the query types for <see cref="M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.Byte*,System.Int32@,System.UInt32)"/> API
            as documented by https://msdn.microsoft.com/en-us/library/windows/desktop/aa380196(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.CryptHashDataFlags">
            <summary>
            Flags for the <see cref="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptHashDataFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptHashDataFlags.CRYPT_OWF_REPL_LM_HASH">
            <summary>
            This flag is not used.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.CryptHashDataFlags.CRYPT_USERDATA">
            <summary>
            All Microsoft Cryptographic Providers ignore this parameter. For any CSP that does not ignore this parameter, if this flag is set, the CSP prompts the user to input data directly. This data is added to the hash. The application is not allowed access to the data. This flag can be used to allow the user to enter a PIN into the system.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.CryptSetProvParamQuery">
            <summary>
            Defines the query types for <see cref="M:PInvoke.AdvApi32.CryptSetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptSetProvParamQuery,System.Byte*,System.UInt32)"/> API
            as documented by https://msdn.microsoft.com/en-us/library/windows/desktop/aa380276(v=vs.85).aspx
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS">
            <summary>
            Contains the name of a service in a service control manager database and information about that service.
            It is used by the EnumDependentServices and EnumServicesStatus functions.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ENUM_SERVICE_STATUS.lpServiceName">
            <summary>
            The name of a service in the service control manager database.
            The maximum string length is 256 characters. The service control manager database preserves the case of the characters,
            but service name comparisons are always case insensitive.
            A slash (/), backslash (\), comma, and space are invalid service name characters.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ENUM_SERVICE_STATUS.lpDisplayName">
            <summary>
            A display name that can be used by service control programs, such as Services in Control Panel, to identify the service.
            This string has a maximum length of 256 characters. The name is case-preserved in the service control manager.
            Display name comparisons are always case-insensitive.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ENUM_SERVICE_STATUS.ServiceStatus">
            <summary>
            A <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS"/> structure that contains status information for the <see cref="F:PInvoke.AdvApi32.ENUM_SERVICE_STATUS.lpServiceName"/> service.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ProviderType">
            <summary>
            Crypto providers.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.RegNotifyFilter">
            <summary>
            A value that indicates the changes that should be reported when using <see cref="M:PInvoke.AdvApi32.RegNotifyChangeKeyValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.Boolean,PInvoke.AdvApi32.RegNotifyFilter,Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegNotifyFilter.REG_NOTIFY_CHANGE_NAME">
            <summary>Notify the caller if a subkey is added or deleted.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegNotifyFilter.REG_NOTIFY_CHANGE_ATTRIBUTES">
            <summary>Notify the caller of changes to the attributes of the key, such as the security descriptor information.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegNotifyFilter.REG_NOTIFY_CHANGE_LAST_SET">
            <summary>
                Notify the caller of changes to a value of the key. This can include adding or deleting a value, or changing
                an existing value.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegNotifyFilter.REG_NOTIFY_CHANGE_SECURITY">
            <summary>Notify the caller of changes to the security descriptor of the key.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegNotifyFilter.REG_NOTIFY_THREAD_AGNOSTIC">
            <summary>
                Indicates that the lifetime of the registration must not be tied to the lifetime of the thread issuing the
                <see cref="M:PInvoke.AdvApi32.RegNotifyChangeKeyValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.Boolean,PInvoke.AdvApi32.RegNotifyFilter,Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Boolean)" /> call.
                <para>Note  This flag value is only supported in Windows 8 and later.</para>
                .
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.RegOpenKeyOptions">
            <summary>
            Specifies the option to apply when opening the key in <see cref="M:PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,PInvoke.AdvApi32.RegOpenKeyOptions,PInvoke.Kernel32.ACCESS_MASK,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegOpenKeyOptions.None">
            <summary>
            No option specified
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.RegOpenKeyOptions.REG_OPTION_OPEN_LINK">
            <summary>
            The key is a symbolic link. Registry symbolic links should only be used when absolutely necessary.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SafeCryptographicProviderHandle">
            <summary>
            A cryptographic service provider (CSP) handle.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SafeCryptographicProviderHandle.Null">
            <summary>
            A handle that may be used in place of <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.SafeCryptographicProviderHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.AdvApi32.SafeCryptographicProviderHandle"/> class.
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.SafeCryptographicProviderHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.AdvApi32.SafeCryptographicProviderHandle"/> class.
            </summary>
            <param name="preexistingHandle">An object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.AdvApi32.SafeCryptographicProviderHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.AdvApi32.SafeCryptographicProviderHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.AdvApi32.SafeHashHandle">
            <summary>
            A cryptographic hash algorithm handle.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SafeHashHandle.Null">
            <summary>
            A handle that may be used in place of <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.SafeHashHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.AdvApi32.SafeHashHandle"/> class.
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.SafeHashHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.AdvApi32.SafeHashHandle"/> class.
            </summary>
            <param name="preexistingHandle">An object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.AdvApi32.SafeHashHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.AdvApi32.SafeHashHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.AdvApi32.SafeServiceHandle">
            <summary>
            Represents a preparsed data handle created by
            <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/>
            that can be closed with <see cref="M:PInvoke.AdvApi32.CloseServiceHandle(System.IntPtr)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SafeServiceHandle.Null">
            <summary>
            A handle that may be used in place of <see cref="F:System.IntPtr.Zero"/>.
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.SafeServiceHandle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.AdvApi32.SafeServiceHandle"/> class.
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.SafeServiceHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:PInvoke.AdvApi32.SafeServiceHandle"/> class.
            </summary>
            <param name="preexistingHandle">An object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle">
                <see langword="true" /> to have the native handle released when this safe handle is disposed or finalized;
                <see langword="false" /> otherwise.
            </param>
        </member>
        <member name="P:PInvoke.AdvApi32.SafeServiceHandle.IsInvalid">
            <inheritdoc />
        </member>
        <member name="M:PInvoke.AdvApi32.SafeServiceHandle.ReleaseHandle">
            <inheritdoc />
        </member>
        <member name="T:PInvoke.AdvApi32.SC_ACTION">
            <summary>
            Represents an action that the service control manager can perform.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_ACTION.Type">
            <summary>
            The action to be performed.
            This member can be one of the following values from the <see cref="T:PInvoke.AdvApi32.SC_ACTION_TYPE"/> enumeration type.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_ACTION.Delay">
            <summary>
            The time to wait before performing the specified action, in milliseconds.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SC_ACTION_TYPE">
            <summary>
            Specifies action levels for the Type member of the <see cref="T:PInvoke.AdvApi32.SC_ACTION"/> struct.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_NONE">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_RESTART">
            <summary>
            Restart the service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_REBOOT">
            <summary>
            Reboot the computer.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND">
            <summary>
            Run a command.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SC_STATUS_TYPE">
            <summary>
            Specifies the information level for the <see cref="M:PInvoke.AdvApi32.QueryServiceStatusEx(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SC_STATUS_TYPE,System.Void*,System.Int32,System.Int32@)"/> method.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO">
            <summary>
            Retrieves the service status information.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SECURITY_INFORMATION">
            <summary>
            Identifies the object-related security information being set or queried.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.ATTRIBUTE_SECURITY_INFORMATION">
            <summary>
                The resource properties of the object being referenced. The resource properties are stored in
                SYSTEM_RESOURCE_ATTRIBUTE_ACE types in the SACL of the security descriptor.
            </summary>
            <remarks>
                Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
                This bit flag is not available.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.BACKUP_SECURITY_INFORMATION">
            <summary>
                All parts of the security descriptor. This is useful for backup and restore software that needs to preserve
                the entire security descriptor.
            </summary>
            <remarks>
                Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
                This bit flag is not available.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.DACL_SECURITY_INFORMATION">
            <summary>The DACL of the object is being referenced.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.GROUP_SECURITY_INFORMATION">
            <summary>The primary group identifier of the object is being referenced.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.LABEL_SECURITY_INFORMATION">
            <summary>
                The mandatory integrity label is being referenced. The mandatory integrity label is an ACE in the SACL of the
                object.
            </summary>
            <remarks>Windows Server 2003 and Windows XP:  This bit flag is not available.</remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.OWNER_SECURITY_INFORMATION">
            <summary>The owner identifier of the object is being referenced.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.PROTECTED_DACL_SECURITY_INFORMATION">
            <summary>The DACL cannot inherit access control entries (ACEs).</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.PROTECTED_SACL_SECURITY_INFORMATION">
            <summary>The SACL cannot inherit ACEs.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.SACL_SECURITY_INFORMATION">
            <summary>The SACL of the object is being referenced.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.SCOPE_SECURITY_INFORMATION">
            <summary>
                The Central Access Policy (CAP) identifier applicable on the object that is being referenced. Each CAP
                identifier is stored in a SYSTEM_SCOPED_POLICY_ID_ACE type in the SACL of the SD.
            </summary>
            <remarks>
                Windows Server 2008 R2, Windows 7, Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:
                This bit flag is not available.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.UNPROTECTED_DACL_SECURITY_INFORMATION">
            <summary>The DACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SECURITY_INFORMATION.UNPROTECTED_SACL_SECURITY_INFORMATION">
            <summary>The SACL inherits ACEs from the parent object.</summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceAccess">
            <summary>
            Enumerates the <see cref="P:PInvoke.Kernel32.ACCESS_MASK.SpecificRights"/> that may apply to services.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceControl">
            <summary>
             Represents a control code that can be sent to a service <see cref="M:PInvoke.AdvApi32.ControlService(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceControl,PInvoke.AdvApi32.SERVICE_STATUS@)"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_STOP">
            <summary>
            Notifies a service that it should stop. The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_STOP"/> access right.
            After sending the stop request to a service, you should not send other controls to the service.
            </summary>
            <remarks>
            <para>
            If a service accepts this control code, it must stop upon receipt and return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>. After the SCM sends this control code, it will not send other control codes to the service.
            </para>
            <para>
            Windows XP:  If the service returns <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/> and continues to run, it continues to receive control codes. This behavior changed starting with Windows Server 2003 and Windows XP with SP2.
            </para>
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_PAUSE">
            <summary>
            Notifies a service that it should pause. The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_CONTINUE">
            <summary>
            Notifies a paused service that it should resume. The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_INTERROGATE">
            <summary>
            Notifies a service that it should report its current status information to the service control manager.
            The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_INTERROGATE"/> access right.
            Note that this control is not generally useful as the SCM is aware of the current state of the service.
            </summary>
            <remarks>
            The handler should simply return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>; the SCM is aware of the current state of the service.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_SHUTDOWN">
            <summary>
            Notifies a service that the system is shutting down so the service can perform cleanup tasks.
            Note that services that register for <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_PRESHUTDOWN"/> notifications cannot receive this notification because they have already stopped.
            </summary>
            <remarks>
            If a service accepts this control code, it must stop after it performs its cleanup tasks and return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>.
            After the SCM sends this control code, it will not send other control codes to the service.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_PARAMCHANGE">
            <summary>
            Notifies a service that its startup parameters have changed. The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
            <remarks>
            The service should reread its startup parameters.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDADD">
            <summary>
            Notifies a network service that there is a new component for binding.
            The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
            <remarks>
            This control code has been deprecated; use Plug and Play functionality instead.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDREMOVE">
            <summary>
            Notifies a network service that a component for binding has been removed.
            The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
            <remarks>
            This control code has been deprecated; use Plug and Play functionality instead.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDENABLE">
            <summary>
            Notifies a network service that a disabled binding has been enabled.
            The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
            <remarks>
            This control code has been deprecated; use Plug and Play functionality instead.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDDISABLE">
            <summary>
            Notifies a network service that one of its bindings has been disabled.
            The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_PAUSE_CONTINUE"/> access right.
            </summary>
            <remarks>
            This control code has been deprecated; use Plug and Play functionality instead.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_DEVICEEVENT">
            <summary>
            Notifies a service of device events.
            The service must have registered to receive these notifications using the RegisterDeviceNotification function.
            </summary>
            <remarks>
            The dwEventType and lpEventData parameters contain additional information.
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_HARDWAREPROFILECHANGE">
            <summary>
            Notifies a service that the computer's hardware profile has changed.
            </summary>
            <remarks>
            The dwEventType parameter contains additional information.
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_POWEREVENT">
            <summary>
            Notifies a service of system power events. The dwEventType parameter contains additional information.
            </summary>
            <remarks>
            If dwEventType is PBT_POWERSETTINGCHANGE, the lpEventData parameter also contains additional information.
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_SESSIONCHANGE">
            <summary>
            Notifies a service of session change events.
            Note that a service will only be notified of a user logon if it is fully loaded before the logon attempt is made.
            </summary>
            <remarks>
            The dwEventType and lpEventData parameters contain additional information.
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_PRESHUTDOWN">
            <summary>
            Notifies a service that the system will be shutting down.
            Services that need additional time to perform cleanup tasks beyond the tight time restriction at system shutdown can use this notification.
            The service control manager sends this notification to applications that have registered for it before sending a <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_SHUTDOWN"/> notification to applications that have registered for that notification.
            </summary>
            <remarks>
            <para>
            A service that handles this notification blocks system shutdown until the service stops or the preshutdown time-out interval specified through SERVICE_PRESHUTDOWN_INFO expires.
            Because this affects the user experience, services should use this feature only if it is absolutely necessary to avoid data loss or significant recovery time at the next system start.
            </para>
            <para>
            Windows Server 2003 and Windows XP:  This value is not supported.
            </para>
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_TIMECHANGE">
            <summary>
            Notifies a service that the system time has changed.
            </summary>
            <remarks>
            <para>
            The lpEventData parameter contains additional information.
            The dwEventType parameter is not used.
            </para>
            <para>
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This control code is not supported.
            </para>
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_TRIGGEREVENT">
            <summary>
            Notifies a service registered for a service trigger event that the event has occurred.
            </summary>
            <remarks>
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This control code is not supported.
            </remarks>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_USERMODEREBOOT">
            <summary>
            Notifies a service that the user has initiated a reboot.
            </summary>
            <remarks>
            Control code supported by the <see cref="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION"/> function.
            Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  This control code is not supported.
            </remarks>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceDelayedAutoStartInfo">
            <summary>
            Contains the delayed auto-start setting of an auto-start service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceDelayedAutoStartInfo.fDelayedAutostart">
            <summary>
            If this member is TRUE, the service is started after other auto-start services are started plus a short delay.
            Otherwise, the service is started during system boot.
            This setting is ignored unless the service is an auto-start service.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceDescription">
            <summary>
            Contains a service description.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceDescription.lpDescription">
            <summary>
            The description of the service. If this member is NULL, the description remains unchanged.
            If this value is an empty string (""), the current description is deleted.
            The service description must not exceed the size of a registry value of type REG_SZ.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceErrorControl">
            <summary>
            Describes the severity of the error, and action taken, if this service fails to start.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_IGNORE">
            <summary>
            The startup program ignores the error and continues the startup operation.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_NORMAL">
            <summary>
            The startup program logs the error in the event log but continues the startup operation.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_SEVERE">
            <summary>
            The startup program logs the error in the event log. If the last-known-good configuration is being started, the startup operation continues.
            Otherwise, the system is restarted with the last-known-good configuration.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_CRITICAL">
            <summary>
            The startup program logs the error in the event log, if possible. If the last-known-good configuration is being started, the startup operation fails.
            Otherwise, the system is restarted with the last-known good configuration.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_NO_CHANGE">
            <summary>
            The service current type is not changed.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceInfoLevel">
            <summary>
            Describes the configuration information to be changed.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_DESCRIPTION">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.ServiceDescription"/> structure.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_FAILURE_ACTIONS">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS"/> structure.
            If the service controller handles the <see cref="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_REBOOT"/> action, the caller must have the SE_SHUTDOWN_NAME privilege.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_DELAYED_AUTO_START_INFO">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.ServiceDelayedAutoStartInfo"/> struct.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_FAILURE_ACTIONS_FLAG">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS"/> structure.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_SERVICE_SID_INFO">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.ServiceSidInfo"/> structure.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.ServiceRequiredPrivilegesInfo"/> structure.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_PRESHUTDOWN_INFO">
            <summary>
            The lpInfo parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.ServicePreshutdownInfo"/> structure.
            Windows Server 2003 and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_TRIGGER_INFO">
            <summary>
            The lpInfo parameter is a pointer to a SERVICE_TRIGGER_INFO structure.
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This value is not supported until Windows Server 2008 R2.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_PREFERRED_NODE">
            <summary>
            The lpInfo parameter is a pointer to a SERVICE_PREFERRED_NODE_INFO structure.
            Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP:  This value is not supported.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceInfoLevel.SERVICE_CONFIG_LAUNCH_PROTECTED">
            <summary>
            The lpInfo parameter is a pointer a <see cref="T:PInvoke.AdvApi32.ServiceLaunchProtected"/> structure.
            Note  This value is supported starting with Windows 8.1.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceLaunchProtected">
            <summary>
            The protection type of the service
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceLaunchProtectedInfo">
            <summary>
            Indicates a service protection type.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceLaunchProtectedInfo.dwPreshutdownTimeout">
            <summary>
            The protection type of the service.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceManagerAccess">
            <summary>
            Enumerates the <see cref="P:PInvoke.Kernel32.ACCESS_MASK.SpecificRights"/> that may apply to service managers.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServicePreferredNodeInfo">
            <summary>
            Represents the preferred node on which to run a service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServicePreferredNodeInfo.usPreferredNode">
            <summary>
            The node number of the preferred node.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServicePreferredNodeInfo.fDelete">
            <summary>
            If this member is TRUE, the preferred node setting is deleted.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServicePreshutdownInfo">
            <summary>
            Contains preshutdown settings
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServicePreshutdownInfo.dwPreshutdownTimeout">
            <summary>
            The time-out value, in milliseconds.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceRequiredPrivilegesInfo">
            <summary>
            Represents the required privileges for a service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceRequiredPrivilegesInfo.pmszRequiredPrivileges">
            <summary>
            A multi-string that specifies the privileges. For a list of possible values, see Privilege Constants.
            A multi-string is a sequence of null-terminated strings, terminated by an empty string (\0).
            <example>The following is an example:</example>
            <code>String1\0String2\0String3\0LastString\0\0</code>
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceSidInfo">
            <summary>
            Represents a service security identifier (SID).
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceSidInfo.dwServiceSidType">
            <summary>
            The service SID type.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceSidType">
            <summary>
            Represents a service security identifier (SID).
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceSidType.SERVICE_SID_TYPE_NONE">
            <summary>
            Use this type to reduce application compatibility issues.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceSidType.SERVICE_SID_TYPE_UNRESTRICTED">
            <summary>
            When the service process is created,
            the service SID is added to the service process token with the following attributes: SE_GROUP_ENABLED_BY_DEFAULT | SE_GROUP_OWNER.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceSidType.SERVICE_SID_TYPE_RESTRICTED">
            <summary>
            This type includes SERVICE_SID_TYPE_UNRESTRICTED.
            The service SID is also added to the restricted SID list of the process token.
            Three additional SIDs are also added to the restricted SID list:
            <list type="bullet">
            <item>World SID S-1-1-0</item>
            <item>Service logon SID</item>
            <item>Write-restricted SID S-1-5-33</item>
            </list>
            One ACE that allows GENERIC_ALL access for the service logon SID is also added to the service process token object.
            If there are multiple services hosted in the same process and one service has SERVICE_SID_TYPE_RESTRICTED, all services must have SERVICE_SID_TYPE_RESTRICTED.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceStartType">
            <summary>
            Describes service start type.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_BOOT_START">
            <summary>
            A device driver started by the system loader. This value is valid only for driver services.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_SYSTEM_START">
            <summary>
            A device driver started by the IoInitSystem function. This value is valid only for driver services.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_AUTO_START">
            <summary>
            A service started automatically by the service control manager during system startup.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_DEMAND_START">
            <summary>
            A service started by the service control manager when a process calls the <see cref="M:PInvoke.AdvApi32.StartService(PInvoke.AdvApi32.SafeServiceHandle,System.Int32,System.String)"/> function.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_DISABLED">
            <summary>
            A service that cannot be started. Attempts to start the service result in the error code ERROR_SERVICE_DISABLED.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_NO_CHANGE">
            <summary>
            The service current type is not changed.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceState">
            <summary>
            Represents the current state of a servies
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_STOPPED">
            <summary>
            The service is not running.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_START_PENDING">
            <summary>
            The service is starting.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_STOP_PENDING">
            <summary>
            The service is stopping.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_RUNNING">
            <summary>
            The service is running.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_CONTINUE_PENDING">
            <summary>
            The service continue is pending.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_PAUSE_PENDING">
            <summary>
            The service pause is pending.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceState.SERVICE_PAUSED">
            <summary>
            The service is paused.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceStateQuery">
            <summary>
            Represents the state of the services to be enumerated (<see cref="M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.Byte*,System.Int32,System.Int32@,System.Int32@,System.Int32@)"/> or EnumServicesStatusEx).
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_ACTIVE">
            <summary>
            Enumerates services that are in the following states:
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_START_PENDING"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_STOP_PENDING"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_RUNNING"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_CONTINUE_PENDING"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_PAUSE_PENDING"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_PAUSED"/>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_INACTIVE">
            <summary>
            Enumerates services that are in the <see cref="F:PInvoke.AdvApi32.ServiceState.SERVICE_STOPPED"/> state.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_STATE_ALL">
            <summary>
            Combines the following states: <see cref="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_ACTIVE"/> and <see cref="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_INACTIVE"/>.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceTrigger">
            <summary>
            Represents a service trigger event. This structure is used by the <see cref="T:PInvoke.AdvApi32.ServiceTriggerInfo"/> structure.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTrigger.dwTriggerType">
            <summary>
            The trigger event type
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTrigger.dwAction">
            <summary>
            The action to take when the specified trigger event occurs.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTrigger.pTriggerSubtype">
            <summary>
            Points to a GUID that identifies the trigger event subtype. The value
            of this member depends on the value of the <see cref="F:PInvoke.AdvApi32.ServiceTrigger.dwTriggerType"/> member.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTrigger.cDataItems">
            <summary>
            The number of <see cref="T:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"/> structures in the
            array pointed to by <see cref="F:PInvoke.AdvApi32.ServiceTrigger.pDataItems"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTrigger.pDataItems">
            <summary>
            A pointer to an array of <see cref="T:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"/>
            structures that contain trigger-specific data.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerAction.SERVICE_TRIGGER_ACTION_SERVICE_START">
            <summary>
            Start the service when the specified trigger event occurs.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerAction.SERVICE_TRIGGER_ACTION_SERVICE_STOP">
            <summary>
            Stop the service when the specified trigger event occurs.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceTriggerDataType">
            <summary>
            Represents a service trigger data type. This is used by the <see cref="T:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM"/> structure.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_BINARY">
            <summary>
            The trigger-specific data is in binary format.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_STRING">
            <summary>
            The trigger-specific data is in string format.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_LEVEL">
            <summary>
            The trigger-specific data is a byte value.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY">
            <summary>
            The trigger-specific data is a 64-bit unsigned integer value.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL">
            <summary>
            The trigger-specific data is a 64-bit unsigned integer value.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceTriggerInfo">
            <summary>
            Contains trigger event information for a service. This structure is used by the <see cref="M:PInvoke.AdvApi32.ChangeServiceConfig2(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceInfoLevel,System.Void*)"/> and QueryServiceConfig2 functions.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerInfo.cTriggers">
            <summary>
            The number of triggers in the array of SERVICE_TRIGGER structures pointed to by the pTriggers member.
            If this member is 0 in a SERVICE_TRIGGER_INFO structure passed to ChangeServiceConfig2, all previously configured triggers are removed from the service.If the service has no triggers configured, ChangeServiceConfig2 fails with ERROR_INVALID_PARAMETER.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerInfo.pTriggers">
            <summary>
            A pointer to an array of <see cref="T:PInvoke.AdvApi32.ServiceTrigger"/> structures that specify the trigger events for the service.
            If the cTriggers member is 0, this member is not used.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerInfo.pReserved">
            <summary>
            This member is reserved and must be NULL.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL">
            <summary>
            The event is triggered when a device of the specified device interface class arrives or is present when the system starts. This trigger event is commonly used to start a service.
            The pTriggerSubtype member specifies the device interface class GUID. These GUIDs are defined in device-specific header files provided with the Windows Driver Kit(WDK).
            The pDataItems member specifies one or more hardware ID and compatible ID strings for the device interface class. Strings must be Unicode.If more than one string is specified, the event is triggered if any one of the strings match. For example, the Wpdbusenum service is started when a device of device interface class GUID_DEVINTERFACE_DISK {53f56307-b6bf-11d0-94f2-00a0c91efb8b }
            and a hardware ID string of "USBSTOR\GenDisk" arrives.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY">
            <summary>
            The event is triggered when the first IP address on the TCP/IP networking stack becomes available or the last IP address on the stack becomes unavailable. This trigger event can be used to start or stop a service.
            The pTriggerSubtype member specifies NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID or NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID.
            The pDataItems member is not used.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_DOMAIN_JOIN">
            <summary>
            The event is triggered when the computer joins or leaves a domain. This trigger event can be used to start or stop a service.
            The pTriggerSubtype member specifies DOMAIN_JOIN_GUID or DOMAIN_LEAVE_GUID.
            The pDataItems member is not used.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT">
            <summary>
            The event is triggered when a firewall port is opened or approximately 60 seconds after the firewall port is closed. This trigger event can be used to start or stop a service.
            The pTriggerSubtype member specifies FIREWALL_PORT_OPEN_GUID or FIREWALL_PORT_CLOSE_GUID.
            The pDataItems member specifies the port, the protocol, and optionally the executable path and user information (SID string or name) of the service listening on the event. The "RPC" token can be used in place of the port to specify any listening socket used by RPC. The "system" token can be used in place of the executable path to specify ports created by and listened on by the Windows kernel.
            The event is triggered only if all strings match. For example, if MyService hosted inside MyServiceProcess.exe is to be trigger-started when port UDP 5001 opens, the trigger-specific data would be the Unicode representation of "5001\0UDP\0%programfiles%\MyApplication\MyServiceProcess.exe\0MyService\0\0".
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_GROUP_POLICY">
            <summary>
            The event is triggered when a machine policy or user policy change occurs. This trigger event is commonly used to start a service.
            The pTriggerSubtype member specifies MACHINE_POLICY_PRESENT_GUID or USER_POLICY_PRESENT_GUID.
            The pDataItems member is not used.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT">
            <summary>
            The event is triggered when a packet or request arrives on a particular network protocol. This request is commonly used to start a service that has stopped itself after an idle time-out when there is no work to do.
            Windows 7 and Windows Server 2008 R2:  This trigger type is not supported until Windows 8 and Windows Server 2012.
            The pTriggerSubtype member specifies one of the following values: RPC_INTERFACE_EVENT_GUID, NAMED_PIPE_EVENT_GUID, TCP_PORT_EVENT_GUID, or UDP_EVENT_PORT_GUID.
            The pDataItems member specifies an endpoint or interface GUID. The string must be Unicode.The event triggers if the string is an exact match.
            The dwAction member must be SERVICE_TRIGGER_ACTION_SERVICE_START.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_CUSTOM">
            <summary>
            The event is a custom event generated by an Event Tracing for Windows (ETW) provider.
            This trigger event can be used to start or stop a service.
            The pTriggerSubtype member specifies the event provider's GUID.
            The pDataItems member specifies trigger-specific data defined by the provider.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.ServiceType">
            <summary>
            Describes service type flags.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_KERNEL_DRIVER">
            <summary>
            Driver service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_FILE_SYSTEM_DRIVER">
            <summary>
            File system driver service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_DRIVER">
            <summary>
            Services of type <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_KERNEL_DRIVER"/> and <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_FILE_SYSTEM_DRIVER"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_ADAPTER">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_RECOGNIZER_DRIVER">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS">
            <summary>
            Service that runs in its own process.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS">
            <summary>
            Service that shares a process with other services.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32">
            <summary>
            Services of type <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/> and <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_INTERACTIVE_PROCESS">
            <summary>
            The service can interact with the desktop.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.ServiceType.SERVICE_NO_CHANGE">
            <summary>
            The service current type is not changed.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS">
            <summary>
            Represents the action the service controller should take on each failure of a service. A service is considered failed when it terminates without reporting a status of SERVICE_STOPPED to the service controller.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.dwResetPeriod">
            <summary>
            The time after which to reset the failure count to zero if there are no failures, in seconds.
            Specify <see cref="F:PInvoke.Constants.INFINITE"/> to indicate that this value should never be reset.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpRebootMsg">
            <summary>
            The message to be broadcast to server users before rebooting in response to the <see cref="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_REBOOT"/> service controller action.
            If this value is NULL, the reboot message is unchanged. If the value is an empty string (""), the reboot message is deleted and no message is broadcast.
            This member can specify a localized string using the following format:
            @[path\]
            dllname,-strID
            The string with identifier strID is loaded from dllname; the path is optional.For more information, see RegLoadMUIString.
            Windows Server 2003 and Windows XP:  Localized strings are not supported until Windows Vista.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpCommand">
            <summary>
            The command line of the process for the CreateProcess function to execute in response to the <see cref="F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND"/> service controller action.
            This process runs under the same account as the service. If this value is NULL, the command is unchanged.
            If the value is an empty string (""), the command is deleted and no program is run when the service fails.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.cActions">
            <summary>
            The number of elements in the lpsaActions array.
            If this value is 0, but <see cref="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpsaActions"/> is not NULL, the reset period and array of failure actions are deleted.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpsaActions">
            <summary>
            A pointer to an array of <see cref="T:PInvoke.AdvApi32.SC_ACTION"/> structures.
            If this value is NULL, the <see cref="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.cActions"/> and <see cref="F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.dwResetPeriod"/> members are ignored.
            </summary>
        </member>
        <member name="P:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpRebootMsg_IntPtr">
            <summary>
            The message to be broadcast to server users before rebooting in response to the <see cref = "F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_REBOOT"/> service controller action.
            If this value is NULL, the reboot message is unchanged. If the value is an empty string (""), the reboot message is deleted and no message is broadcast.
            This member can specify a localized string using the following format:
            @[path\]
            dllname,-strID
            The string with identifier strID is loaded from dllname; the path is optional.For more information, see RegLoadMUIString.
            Windows Server 2003 and Windows XP:  Localized strings are not supported until Windows Vista.
            </summary>
        </member>
        <member name="P:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpCommand_IntPtr">
            <summary>
            The command line of the process for the CreateProcess function to execute in response to the <see cref = "F:PInvoke.AdvApi32.SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND"/> service controller action.
            This process runs under the same account as the service. If this value is NULL, the command is unchanged.
            If the value is an empty string (""), the command is deleted and no program is run when the service fails.
            </summary>
        </member>
        <member name="P:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.lpsaActions_IntPtr">
            <summary>
            A pointer to an array of <see cref = "T:PInvoke.AdvApi32.SC_ACTION"/> structures.
            If this value is NULL, the <see cref = "F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.cActions"/> and <see cref = "F:PInvoke.AdvApi32.SERVICE_FAILURE_ACTIONS.dwResetPeriod"/> members are ignored.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SERVICE_STATUS">
            <summary>
            Contains status information for a service.
            The ControlService, EnumDependentServices, EnumServicesStatus, and QueryServiceStatus functions use this structure.
            A service uses this structure in the <see cref="M:PInvoke.AdvApi32.SetServiceStatus(System.IntPtr,PInvoke.AdvApi32.SERVICE_STATUS@)"/> function to report its current status to the service control manager.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwServiceType">
            <summary>
            The type of service. <see cref="T:PInvoke.AdvApi32.ServiceType"/>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwCurrentState">
            <summary>
            The current state of the service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwControlsAccepted">
            <summary>
            The control codes the service accepts and processes in its handler function (see Handler and HandlerEx).
            A user interface process can control a service by specifying a control command in the <see cref="M:PInvoke.AdvApi32.ControlService(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceControl,PInvoke.AdvApi32.SERVICE_STATUS@)"/> or ControlServiceEx function.
            By default, all services accept the <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_INTERROGATE"/> value.
            To accept the <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_DEVICEEVENT"/> value, the service must register to receive device events by using the RegisterDeviceNotification function.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwWin32ExitCode">
            <summary>
            The error code the service uses to report an error that occurs when it is starting or stopping.
            To return an error code specific to the service, the service must set this value to <see cref="F:PInvoke.Win32ErrorCode.ERROR_SERVICE_SPECIFIC_ERROR"/> to indicate that the <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS.dwServiceSpecificExitCode"/> member contains the error code.
            The service should set this value to NO_ERROR when it is running and on normal termination.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwServiceSpecificExitCode">
            <summary>
            A service-specific error code that the service returns when an error occurs while the service is starting or stopping.
            This value is ignored unless the <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS.dwWin32ExitCode"/> member is set to <see cref="F:PInvoke.Win32ErrorCode.ERROR_SERVICE_SPECIFIC_ERROR"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwCheckPoint">
            <summary>
            The check-point value the service increments periodically to report its progress during a lengthy start, stop, pause, or continue operation.
            For example, the service should increment this value as it completes each step of its initialization when it is starting up.
            The user interface program that invoked the operation on the service uses this value to track the progress of the service during a lengthy operation.
            This value is not valid and should be zero when the service does not have a start, stop, pause, or continue operation pending.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS.dwWaitHint">
            <summary>
            The estimated time required for a pending start, stop, pause, or continue operation, in milliseconds.
            Before the specified amount of time has elapsed, the service should make its next call to the <see cref="M:PInvoke.AdvApi32.SetServiceStatus(System.IntPtr,PInvoke.AdvApi32.SERVICE_STATUS@)"/> function with either an incremented <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS.dwCheckPoint"/> value or a change in dwCurrentState.
            If the amount of time specified by <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS.dwWaitHint"/> passes, and <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS.dwCheckPoint"/> has not been incremented or <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS.dwCurrentState"/> has not changed,
            the service control manager or service control program can assume that an error has occurred and the service should be stopped.
            However, if the service shares a process with other services, the service control manager cannot terminate the service application because it would have to terminate the other services sharing the process as well.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS">
            <summary>
            Contains status information for a service.
            The ControlService, EnumDependentServices, EnumServicesStatus, and QueryServiceStatus functions use this structure.
            A service uses this structure in the <see cref="M:PInvoke.AdvApi32.SetServiceStatus(System.IntPtr,PInvoke.AdvApi32.SERVICE_STATUS@)"/> function to report its current status to the service control manager.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwServiceType">
            <summary>
            The type of service. <see cref="T:PInvoke.AdvApi32.ServiceType"/>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwCurrentState">
            <summary>
            The current state of the service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwControlsAccepted">
            <summary>
            The control codes the service accepts and processes in its handler function (see Handler and HandlerEx).
            A user interface process can control a service by specifying a control command in the <see cref="M:PInvoke.AdvApi32.ControlService(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceControl,PInvoke.AdvApi32.SERVICE_STATUS@)"/> or ControlServiceEx function.
            By default, all services accept the <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_INTERROGATE"/> value.
            To accept the <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_DEVICEEVENT"/> value, the service must register to receive device events by using the RegisterDeviceNotification function.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwWin32ExitCode">
            <summary>
            The error code the service uses to report an error that occurs when it is starting or stopping.
            To return an error code specific to the service, the service must set this value to <see cref="F:PInvoke.Win32ErrorCode.ERROR_SERVICE_SPECIFIC_ERROR"/> to indicate that the <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwServiceSpecificExitCode"/> member contains the error code.
            The service should set this value to NO_ERROR when it is running and on normal termination.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwServiceSpecificExitCode">
            <summary>
            A service-specific error code that the service returns when an error occurs while the service is starting or stopping.
            This value is ignored unless the <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwWin32ExitCode"/> member is set to <see cref="F:PInvoke.Win32ErrorCode.ERROR_SERVICE_SPECIFIC_ERROR"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwCheckPoint">
            <summary>
            The check-point value the service increments periodically to report its progress during a lengthy start, stop, pause, or continue operation.
            For example, the service should increment this value as it completes each step of its initialization when it is starting up.
            The user interface program that invoked the operation on the service uses this value to track the progress of the service during a lengthy operation.
            This value is not valid and should be zero when the service does not have a start, stop, pause, or continue operation pending.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwWaitHint">
            <summary>
            The estimated time required for a pending start, stop, pause, or continue operation, in milliseconds.
            Before the specified amount of time has elapsed, the service should make its next call to the <see cref="M:PInvoke.AdvApi32.SetServiceStatus(System.IntPtr,PInvoke.AdvApi32.SERVICE_STATUS@)"/> function with either an incremented <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwCheckPoint"/> value or a change in dwCurrentState.
            If the amount of time specified by <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwWaitHint"/> passes, and <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwCheckPoint"/> has not been incremented or <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwCurrentState"/> has not changed,
            the service control manager or service control program can assume that an error has occurred and the service should be stopped.
            However, if the service shares a process with other services, the service control manager cannot terminate the service application because it would have to terminate the other services sharing the process as well.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwProcessId">
            <summary>
            The process identifier of the service.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwServiceFlags">
            <summary>
            Flags describing the service process.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS_Flags">
            <summary>
            Flags associated with a <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS"/> structure.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS_Flags.None">
            <summary>
            The service is running in a process that is not a system process, or it is not running.
            If the service is running in a process that is not a system process, <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwProcessId"/> is nonzero.
            If the service is not running, <see cref="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS.dwProcessId"/> is zero.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS_Flags.SERVICE_RUNS_IN_SYSTEM_PROCESS">
            <summary>
            The service runs in a system process that must always be running.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM">
            <summary>
            Contains trigger-specific data for a service trigger event.
            This structure is used by the <see cref="T:PInvoke.AdvApi32.ServiceTrigger"/> structure for <see cref="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_CUSTOM"/>, <see cref="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL"/>, <see cref="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT"/>, or <see cref="F:PInvoke.AdvApi32.ServiceTriggerType.SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT"/> trigger events.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.dwDataType">
            <summary>
            The data type of the trigger-specific data pointed to by <see cref="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.pData"/>.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.cbData">
            <summary>
            The size of the trigger-specific data pointed to <see cref="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.pData"/>, in bytes.
            The maximum value is 1024.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.pData">
            <summary>
            A pointer to the trigger-specific data for the service trigger event.
            The trigger-specific data depends on the trigger event type; see Remarks.
            If the <see cref="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.dwDataType"/> member is <see cref="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_BINARY"/>, the trigger-specific data is an array of bytes.
            If the <see cref="F:PInvoke.AdvApi32.SERVICE_TRIGGER_SPECIFIC_DATA_ITEM.dwDataType"/> member is <see cref="F:PInvoke.AdvApi32.ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_STRING"/>, the trigger-specific data is a null-terminated string or a multistring of null-terminated strings,
            ending with two null-terminating characters.
            For example: "5001\0UDP\0%programfiles%\MyApplication\MyServiceProcess.exe\0MyService\0\0".
            Strings must be Unicode; ANSI strings are not supported.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.SE_OBJECT_TYPE">
            <summary>
            The SE_OBJECT_TYPE enumeration contains values that correspond to the types of Windows objects that support security.
            The functions, such as <see cref="M:PInvoke.AdvApi32.GetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.SECURITY_DESCRIPTOR*)"/> and <see cref="M:PInvoke.AdvApi32.SetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*)"/>, that set and retrieve the security information of an object,
            use these values to indicate the type of object.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_UNKNOWN_OBJECT_TYPE">
            <summary>
            Unknown object type.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_FILE_OBJECT">
            <summary>
            Indicates a file or directory. The name string that identifies a file or directory object can be in one of the following formats:
            <list>
            <item>A relative path, such as FileName.dat or ..\FileName</item>
            <item>An absolute path, such as FileName.dat, C:\DirectoryName\FileName.dat, or G:\RemoteDirectoryName\FileName.dat.</item>
            <item>A UNC name, such as \\ComputerName\ShareName\FileName.dat.</item>
            </list>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_SERVICE">
            <summary>
            Indicates a Windows service. A service object can be a local service, such as ServiceName, or a remote service, such as \\ComputerName\ServiceName.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_PRINTER">
            <summary>
            Indicates a printer. A printer object can be a local printer, such as PrinterName, or a remote printer, such as \\ComputerName\PrinterName.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_REGISTRY_KEY">
            <summary>
            Indicates a registry key. A registry key object can be in the local registry, such as CLASSES_ROOT\SomePath or in a remote registry, such as \\ComputerName\CLASSES_ROOT\SomePath.
            The names of registry keys must use the following literal strings to identify the predefined registry keys: "CLASSES_ROOT", "CURRENT_USER", "MACHINE", and "USERS".
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_LMSHARE">
            <summary>
            Indicates a network share. A share object can be local, such as ShareName, or remote, such as \\ComputerName\ShareName.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_KERNEL_OBJECT">
            <summary>
            Indicates a local kernel object.
            The <see cref="M:PInvoke.AdvApi32.GetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.SECURITY_DESCRIPTOR*)"/> and <see cref="M:PInvoke.AdvApi32.SetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*)"/> functions support all types of kernel objects.
            The <see cref="M:PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.SECURITY_DESCRIPTOR*)"/> and <see cref="M:PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*)"/> functions work only with the following kernel objects:
            <list>
            <item>semaphore</item>
            <item>event</item>
            <item>mutex</item>
            <item>waitable timer</item>
            <item>file mapping</item>
            </list>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_WINDOW_OBJECT">
            <summary>
            Indicates a window station or desktop object on the local computer.
            You cannot use <see cref="M:PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.SECURITY_DESCRIPTOR*)"/> and <see cref="M:PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*)"/> with these objects because the names of window stations or desktops are not unique.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_DS_OBJECT">
            <summary>
            Indicates a directory service object or a property set or property of a directory service object. The name string for a directory service object must be in X.500 form, for example:
             CN = SomeObject, OU = ou2, OU = ou1, DC = DomainName, DC = CompanyName, DC = com, O = internet
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_DS_OBJECT_ALL">
            <summary>
            Indicates a directory service object and all of its property sets and properties.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_PROVIDER_DEFINED_OBJECT">
            <summary>
            Indicates a provider-defined object.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_WMIGUID_OBJECT">
            <summary>
            Indicates a WMI object.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SE_OBJECT_TYPE.SE_REGISTRY_WOW64_32KEY">
            <summary>
            Indicates an object for a registry entry under WOW64.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.TokenAccessRights">
            <summary>
            Enumerates the <see cref="P:PInvoke.Kernel32.ACCESS_MASK.SpecificRights"/> that may apply to tokens.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_ASSIGN_PRIMARY">
            <summary>
                Required to attach a primary token to a process. The SE_ASSIGNPRIMARYTOKEN_NAME privilege is also required to
                accomplish this task.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_DUPLICATE">
            <summary>Required to duplicate an access token.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_IMPERSONATE">
            <summary>Required to attach an impersonation access token to a process.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_QUERY">
            <summary>Required to query an access token.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_QUERY_SOURCE">
            <summary>Required to query the source of an access token.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_ADJUST_PRIVILEGES">
            <summary>Required to enable or disable the privileges in an access token.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_ADJUST_GROUPS">
            <summary>Required to adjust the attributes of the groups in an access token.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_ADJUST_DEFAULT">
            <summary>Required to change the default owner, primary group, or DACL of an access token.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_ADJUST_SESSIONID">
            <summary>Required to adjust the session ID of an access token. The SE_TCB_NAME privilege is required.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_READ">
            <summary>Combines STANDARD_RIGHTS_READ and TOKEN_QUERY.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_WRITE">
            <summary>Combines STANDARD_RIGHTS_WRITE, TOKEN_ADJUST_PRIVILEGES, TOKEN_ADJUST_GROUPS, and TOKEN_ADJUST_DEFAULT.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_EXECUTE">
            <summary>Combines STANDARD_RIGHTS_EXECUTE and TOKEN_IMPERSONATE.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_ALL_ACCESS">
            <summary>Combines all possible access rights for a token.</summary>
        </member>
        <member name="T:PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE">
            <summary>
            Indicates the elevation type of token being queried by the <see cref="M:PInvoke.AdvApi32.GetTokenInformation(PInvoke.Kernel32.SafeObjectHandle,PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS,System.Void*,System.Int32,System.Int32@)"/> function.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault">
            <summary>
            Standard user that don't require UAC as he doesn't have any elevated attributes in it's
            security token.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE.TokenElevationTypeFull">
            <summary>
            Process executing with full elevated rights, either UAC is disable or the process is
            executing in "Run as administrator" mode.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited">
            <summary>
            Process executing under UAC, the current user got some elevated right but they can't
            be used in the process as the token is "split".
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS">
            <summary>
            Specify the type of information being assigned to or retrieved from an access token.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.TOKEN_TYPE">
            <summary>
            The <see cref="T:PInvoke.AdvApi32.TOKEN_TYPE"/> enumeration contains values that differentiate between a primary token and an
            impersonation token.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TOKEN_TYPE.TokenPrimary">
            <summary>
                The new token is a primary token that you can use in the CreateProcessAsUser function.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.TOKEN_TYPE.TokenImpersonation">
            <summary>
            The new token is an impersonation token.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.SC_GROUP_IDENTIFIER">
            <summary>
            Used to prefix group names so that they can be distinguished from a service name,
            because services and service groups share the same name space.
            </summary>
        </member>
        <member name="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION">
            <summary>
            An application-defined callback function used with the <see cref="M:PInvoke.AdvApi32.RegisterServiceCtrlHandler(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION)"/> function.
            A service program can use it as the control handler function of a particular service.
            </summary>
            <param name="dwControl">The control code.</param>
            <remarks>
            <para>
            This function has been superseded by the HandlerEx control handler function used with the <see cref="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)"/> function.
            A service can use either control handler, but the new control handler supports user-defined context data and additional extended control codes.
            </para>
            <para>
            <paramref name="dwControl" /> with values in the 128 to 255 range is meant to be used by programmers.
            This range is meant to hold user-defined control codes to send actions to the service.
            </para>
            </remarks>
        </member>
        <member name="T:PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX">
            <summary>
            An application-defined callback function used with the <see cref="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)"/> function.
            A service program can use it as the control handler function of a particular service.
            </summary>
            <param name="dwControl">The control code.</param>
            <param name="dwEventType">The type of event that has occurred. It should be a Window Message code.</param>
            <param name="lpEventData">Additional device information, if required. The format of this data depends on the value of the <paramref name="dwControl"/> and <paramref name="dwEventType"/> parameters.</param>
            <param name="lpContext">User-defined data passed from <see cref="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)"/>. When multiple services share a process, the lpContext parameter can help identify the service.</param>
            <returns>
            The return value for this function depends on the control code received:
            <list>
            <item>In general, if your service does not handle the control, return ERROR_CALL_NOT_IMPLEMENTED. However, your service should return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/> for SERVICE_CONTROL_INTERROGATE even if your service does not handle it.</item>
            <item>If your service handles SERVICE_CONTROL_STOP or SERVICE_CONTROL_SHUTDOWN, return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>.</item>
            <item>If your service handles SERVICE_CONTROL_DEVICEEVENT, return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/> to grant the request and an error code to deny the request.</item>
            <item>If your service handles SERVICE_CONTROL_HARDWAREPROFILECHANGE, return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/> to grant the request and an error code to deny the request.</item>
            <item>If your service handles SERVICE_CONTROL_POWEREVENT, return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/> to grant the request and an error code to deny the request.</item>
            <item>For all other control codes your service handles, return <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>.</item>
            </list>
            </returns>
            <remarks>
            <para>
            <paramref name="dwControl" /> with values in the 128 to 255 range is meant to be used by programmers.
            This range is meant to hold user-defined control codes to send actions to the service.
            </para>
            </remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.ChangeServiceConfig(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Changes the configuration parameters of a service.
            To change the optional configuration parameters, use the <see cref="M:PInvoke.AdvApi32.ChangeServiceConfig2(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceInfoLevel,System.Void*)"/> function.
            </summary>
            <param name="hService">
            A handle to the service.
            This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function and
            must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_CHANGE_CONFIG"/> access right.
            </param>
            <param name="dwServiceType">
            The type of service. Specify <see cref="F:PInvoke.AdvApi32.SERVICE_NO_CHANGE"/> if you are not changing the existing service type;
            otherwise, specify one of the following service types.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_FILE_SYSTEM_DRIVER"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_KERNEL_DRIVER"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS"/>
            </item>
            </list>
            </param>
            If you specify either <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/> or <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS"/>,
            and the service is running in the context of the LocalSystem account, you can also specify the following type.
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_INTERACTIVE_PROCESS"/>
            <param name="dwStartType">
            The type of service. Specify <see cref="F:PInvoke.AdvApi32.SERVICE_NO_CHANGE"/> if you are not changing the existing service type;
            otherwise, specify one of the following service types.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_AUTO_START"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_BOOT_START"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_DEMAND_START"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_DISABLED"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_SYSTEM_START"/>
            </item>
            </list>
            </param>
            <param name="dwErrorControl">
            The severity of the error, and action taken, if this service fails to start. Specify SERVICE_NO_CHANGE if you are not changing the existing error control;
            otherwise, specify one of the following values.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_CRITICAL"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_IGNORE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_NORMAL"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceErrorControl.SERVICE_ERROR_SEVERE"/>
            </item>
            </list>
            </param>
            <param name="lpBinaryPathName">
            The fully qualified path to the service binary file. Specify NULL if you are not changing the existing path.
            If the path contains a space, it must be quoted so that it is correctly interpreted.
            For example, "d:\\my share\\myservice.exe" should be specified as "\"d:\\my share\\myservice.exe\"".
            The path can also include arguments for an auto-start service.
            For example, "d:\\myshare\\myservice.exe arg1 arg2". These arguments are passed to the service entry point (typically the main function).
            If you specify a path on another computer, the share must be accessible by the computer account of the local computer because this is the security context used in the remote call.
            However, this requirement allows any potential vulnerabilities in the remote computer to affect the local computer. Therefore, it is best to use a local file.
            </param>
            <param name="lpLoadOrderGroup">
            The name of the load ordering group of which this service is a member. Specify NULL if you are not changing the existing group. Specify an empty string if the service does not belong to a group.
            The startup program uses load ordering groups to load groups of services in a specified order with respect to the other groups. The list of load ordering groups is contained in the ServiceGroupOrder value of the following registry key:
            HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control
            </param>
            <param name="lpdwTagId">
            A pointer to a variable that receives a tag value that is unique in the group specified in the lpLoadOrderGroup parameter. Specify NULL if you are not changing the existing tag.
            You can use a tag for ordering service startup within a load ordering group by specifying a tag order vector in the following registry value:
            HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\GroupOrderList
            Tags are only evaluated for driver services that have <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_BOOT_START"/> or <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_SYSTEM_START"/> start types.
            </param>
            <param name="lpDependencies">
            A pointer to a double null-terminated array of null-separated names of services or load ordering groups that the system must start before this service. Specify NULL or an empty string if the service has no dependencies.
            Dependency on a group means that this service can run if at least one member of the group is running after an attempt to start all members of the group.
            You must prefix group names with SC_GROUP_IDENTIFIER so that they can be distinguished from a service name, because services and service groups share the same name space.
            </param>
            <param name="lpServiceStartName">
            The name of the account under which the service should run.
            If the service type is <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/>, use an account name in the form DomainName\UserName.
            The service process will be logged on as this user.
            If the account belongs to the built-in domain, you can specify .\UserName.
            </param>
            <param name="lpPassword">
            The password to the account name specified by the lpServiceStartName parameter.
            Specify an empty string if the account has no password or if the service runs in the LocalService, NetworkService, or LocalSystem account.
            If the account name specified by the lpServiceStartName parameter is the name of a managed service account or virtual account name, the lpPassword parameter must be NULL.
            Passwords are ignored for driver services.
            </param>
            <param name="lpDisplayName">
            The display name to be used by applications to identify the service for its users. Specify NULL if you are not changing the existing display name; otherwise, this string has a maximum length of 256 characters. The name is case-preserved in the service control manager. Display name comparisons are always case-insensitive.
            This parameter can specify a localized string using the following format:
            @[path\]dllname,-strID
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            The following error codes may be set by the service control manager.
            Other error codes may be set by the registry functions that are called by the service control manager.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_ACCESS_DENIED"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_CIRCULAR_DEPENDENCY"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_DUPLICATE_SERVICE_NAME"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_HANDLE"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_PARAMETER"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_SERVICE_ACCOUNT"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_SERVICE_MARKED_FOR_DELETE"/>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.ChangeServiceConfig2(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceInfoLevel,System.Void*)">
            <summary>
            Changes the optional configuration parameters of a service.
            </summary>
            <param name="hService">
            A handle to the service.
            This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function and
            must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_CHANGE_CONFIG"/> access right.
            </param>
            <param name="dwInfoLevel">
            The configuration information to be changed.
            This parameter can be one value from <see cref="T:PInvoke.AdvApi32.ServiceStartType"/>.
            </param>
            <param name="lpInfo">
            A pointer to the new value to be set for the configuration information.
            The format of this data depends on the value of the <paramref name="dwInfoLevel"/> parameter.
            If this value is NULL, the information remains unchanged.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.ControlService(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceControl,PInvoke.AdvApi32.SERVICE_STATUS@)">
            <summary>
            Sends a control code to a service.
            To specify additional information when stopping a service, use the ControlServiceEx function.
            </summary>
            <param name="hService">
            A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function.
            The access rights required for this handle depend on the <paramref name="dwControl"/> code requested.
            </param>
            <param name="dwControl">
            This parameter can be one of the following control codes.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_CONTINUE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_INTERROGATE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDADD"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDDISABLE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDENABLE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_NETBINDREMOVE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_PARAMCHANGE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_PAUSE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceControl.SERVICE_CONTROL_STOP"/>
            </item>
            </list>
            </param>
            This value can also be a user-defined control code (Range 128 to 255).
            The service defines the action associated with the control code. The hService handle must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_USER_DEFINED_CONTROL"/> access right.
            <param name="lpServiceStatus">
            A pointer to a <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS"/> structure that receives the latest service status information.
            The information returned reflects the most recent status that the service reported to the service control manager.
            The service control manager fills in the structure only when ControlService returns one of the following error codes:
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_SERVICE_CONTROL"/>, ERROR_SERVICE_CANNOT_ACCEPT_CTRL, or <see cref="F:PInvoke.Win32ErrorCode.ERROR_SERVICE_NOT_ACTIVE"/>.
            Otherwise, the structure is not filled in.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a service object and adds it to the specified service control manager database.
            </summary>
            <param name="hSCManager">
            A handle to the service control manager database.
            This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function and must have the <see cref="F:PInvoke.AdvApi32.ServiceManagerAccess.SC_MANAGER_CREATE_SERVICE"/> access right.
            </param>
            <param name="lpServiceName">
            The name of the service to install.
            The maximum string length is 256 characters.
            The service control manager database preserves the case of the characters,
            but service name comparisons are always case insensitive.
            Forward-slash (/) and backslash (\) are not valid service name characters.
            </param>
            <param name="lpDisplayName">
            The display name to be used by user interface programs to identify the service.
            This string has a maximum length of 256 characters.
            The name is case-preserved in the service control manager.
            Display name comparisons are always case-insensitive.
            </param>
            <param name="dwDesiredAccess">
            Before granting the requested access, the system checks the access token of the calling process.
            Common specific rights are defined in <seealso cref="T:PInvoke.AdvApi32.ServiceAccess"/>.
            </param>
            <param name="dwServiceType">
            The service type (<see cref="T:PInvoke.AdvApi32.ServiceType"/>).
            </param>
            <param name="dwStartType">
            The service start options (<see cref="T:PInvoke.AdvApi32.ServiceStartType"/>).
            </param>
            <param name="dwErrorControl">
            The severity of the error (<see cref="T:PInvoke.AdvApi32.ServiceErrorControl"/>), and action taken, if this service fails to start.
            </param>
            <param name="lpBinaryPathName">
            The fully qualified path to the service binary file. If the path contains a space, it must be quoted so that it is correctly interpreted. For example, "d:\\my share\\myservice.exe" should be specified as "\"d:\\my share\\myservice.exe\"".
            The path can also include arguments for an auto-start service.For example, "d:\\myshare\\myservice.exe arg1 arg2". These arguments are passed to the service entry point (typically the main function).
            If you specify a path on another computer, the share must be accessible by the computer account of the local computer because this is the security context used in the remote call.However, this requirement allows any potential vulnerabilities in the remote computer to affect the local computer. Therefore, it is best to use a local file.
            </param>
            <param name="lpLoadOrderGroup">
            The names of the load ordering group of which this service is a member. Specify NULL or an empty string if the service does not belong to a group.
            The startup program uses load ordering groups to load groups of services in a specified order with respect to the other groups.
            The list of load ordering groups is contained in the following registry value:
            HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\ServiceGroupOrder
            </param>
            <param name="lpdwTagId">
            A pointer to a variable that receives a tag value that is unique in the group specified in the lpLoadOrderGroup parameter. Specify NULL if you are not changing the existing tag.
            You can use a tag for ordering service startup within a load ordering group by specifying a tag order vector in the following registry value:
            HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\GroupOrderList
            Tags are only evaluated for driver services that have <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_BOOT_START"/> or <see cref="F:PInvoke.AdvApi32.ServiceStartType.SERVICE_SYSTEM_START"/> start types.
            </param>
            <param name="lpDependencies">
            A pointer to a double null-terminated array of null-separated names of services or load ordering groups that the system must start before this service. Specify NULL or an empty string if the service has no dependencies.
            Dependency on a group means that this service can run if at least one member of the group is running after an attempt to start all members of the group.
            You must prefix group names with SC_GROUP_IDENTIFIER so that they can be distinguished from a service name, because services and service groups share the same name space.
            </param>
            <param name="lpServiceStartName">
            The name of the account under which the service should run.
            If the service type is <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/>, use an account name in the form DomainName\UserName.
            The service process will be logged on as this user.
            If the account belongs to the built-in domain, you can specify .\UserName.
            </param>
            <param name="lpPassword">
            The password to the account name specified by the lpServiceStartName parameter.
            Specify an empty string if the account has no password or if the service runs in the LocalService, NetworkService, or LocalSystem account.
            If the account name specified by the lpServiceStartName parameter is the name of a managed service account or virtual account name, the lpPassword parameter must be NULL.
            Passwords are ignored for driver services.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the service.
            If the function fails, the return value is NULL
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.Byte*,System.Int32@,System.UInt32)">
            <summary>
            Retrieves parameters that govern the operations of a cryptographic service provider (CSP).
            </summary>
            <param name="hProv">A handle of the CSP target of the query. This handle must have been created by using the CryptAcquireContext function.</param>
            <param name="dwParam">The nature of the query.</param>
            <param name="pbData">
            A pointer to a buffer to receive the data. The form of this data varies depending on the value of <paramref name="dwFlags"/>.
            When <paramref name="dwFlags"/> is set to <see cref="F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_USE_HARDWARE_RNG"/>, <paramref name="pbData"/> must be set to NULL.
            This parameter can be NULL to set the size of this information for memory allocation purposes.
            </param>
            <param name="pdwDataLen">
            A pointer to a DWORD value that specifies the size, in bytes, of the buffer pointed to by the <paramref name="pbData"/> parameter.
            When the function returns, the DWORD value contains the number of bytes stored or to be stored in the buffer.
            </param>
            <param name="dwFlags">
            If <paramref name="dwParam"/> is <see cref="F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, the security descriptor on the key container where the keys are stored is retrieved.
            For this case, <paramref name="dwFlags"/> is used to pass in the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags that indicate the requested security information,
            as defined in the Platform SDK. <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags can be combined with a bitwise-OR operation.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptSetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptSetProvParamQuery,System.Byte*,System.UInt32)">
            <summary>
            Customizes the operations of a cryptographic service provider (CSP). This function is commonly used to set a security descriptor on the key container associated with a CSP to control access to the private keys in that key container.
            </summary>
            <param name="hProv">The handle of a CSP for which to set values. This handle must have already been created by using the CryptAcquireContext function.</param>
            <param name="dwParam">Specifies the parameter to set.</param>
            <param name="pbData">
            A pointer to a data buffer that contains the value to be set as a provider parameter.
            The form of this data varies depending on the dwParam value. If dwFlags contains <see cref="F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_USE_HARDWARE_RNG"/>, this parameter must be NULL.
            </param>
            <param name="dwFlags">
            If <paramref name="dwFlags"/> contains <see cref="F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, <paramref name="dwFlags"/> contains the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> applicable bit flags, as defined in the Platform SDK.
            Key-container security is handled by using SetFileSecurity and GetFileSecurity.
            These bit flags can be combined by using a bitwise-OR operation.For more information, see <see cref="M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.Byte*,System.Int32@,System.UInt32)"/>.
            If dwParam is <see cref="F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_USE_HARDWARE_RNG"/> or <see cref="F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_DELETEKEY"/>, <paramref name="dwFlags"/> must be set to zero.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.DeleteService(PInvoke.AdvApi32.SafeServiceHandle)">
            <summary>
            Marks the specified service for deletion from the service control manager database.
            </summary>
            <param name="hService">
            A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function, and it must have the <see cref="F:PInvoke.Kernel32.ACCESS_MASK.StandardRight.DELETE"/> access right
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)">
            <summary>
            Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.
            </summary>
            <param name="lpMachineName">
            The name of the target computer.
            If the pointer is NULL or points to an empty string,
            the function connects to the service control manager on the local computer.
            </param>
            <param name="lpDatabaseName">
            The name of the service control manager database.
            This parameter should be set to SERVICES_ACTIVE_DATABASE.
            If it is NULL, the SERVICES_ACTIVE_DATABASE database is opened by default.
            </param>
            <param name="dwDesiredAccess">
            The access to the service control manager. For a list of access rights, see Service Security and Access Rights.
            Before granting the requested access rights, the system checks the access token of the calling process against the discretionary access-control list of the security descriptor associated with the service control manager.
            The <see cref="F:PInvoke.AdvApi32.ServiceManagerAccess.SC_MANAGER_CONNECT"/> access right is implicitly specified by calling this function.
            Common specific rights are defined in <seealso cref="T:PInvoke.AdvApi32.ServiceManagerAccess"/>.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the specified service control manager database.
            If the function fails, the return value is NULL.To get extended error information, call <see cref="M:PInvoke.Kernel32.GetLastError"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)">
            <summary>
            Opens an existing service.
            </summary>
            <param name="hSCManager">
            A handle to the service control manager database. The <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function returns this handle.
            </param>
            <param name="lpServiceName">
            The name of the service to be opened. This is the name specified by the lpServiceName parameter of the CreateService function when the service object was created, not the service display name that is shown by user interface applications to identify the service.
            The maximum string length is 256 characters.The service control manager database preserves the case of the characters, but service name comparisons are always case insensitive.Forward-slash(/) and backslash(\) are invalid service name characters.
            </param>
            <param name="dwDesiredAccess">
            Before granting the requested access, the system checks the access token of the calling process against the discretionary access-control list of the security descriptor associated with the service object.
            Common specific rights are defined in <seealso cref="T:PInvoke.AdvApi32.ServiceAccess"/>.
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the service.
            If the function fails, the return value is NULL.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.StartService(PInvoke.AdvApi32.SafeServiceHandle,System.Int32,System.String)">
            <summary>
            Starts a service.
            </summary>
            <param name="hService">
            A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function, and it must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_START"/> access right.
            </param>
            <param name="dwNumServiceArgs">
            The number of strings in the lpServiceArgVectors array. If lpServiceArgVectors is NULL, this parameter can be zero.
            </param>
            <param name="lpServiceArgVectors">
            The null-terminated strings to be passed to the ServiceMain function for the service as arguments. If there are no arguments, this parameter can be NULL. Otherwise, the first argument (lpServiceArgVectors[0]) is the name of the service, followed by any additional arguments (lpServiceArgVectors[1] through lpServiceArgVectors[dwNumServiceArgs-1]).
            Driver services do not receive these arguments.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.OpenProcessToken(System.IntPtr,PInvoke.Kernel32.ACCESS_MASK,PInvoke.Kernel32.SafeObjectHandle@)">
            <summary>Opens the access token associated with a process.</summary>
            <param name="processHandle">
                A handle to the process whose access token is opened. The process must have the
                PROCESS_QUERY_INFORMATION access permission.
            </param>
            <param name="desiredAccess">
                Specifies an access mask that specifies the requested types of access to the access token.
                These requested access types are compared with the discretionary access control list (DACL) of the token to
                determine which accesses are granted or denied.
                Common specific rights are defined in <seealso cref="T:PInvoke.AdvApi32.TokenAccessRights"/>.
            </param>
            <param name="tokenHandle">A handle that identifies the newly opened access token when the function returns.</param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
                <para>
                    If the function fails, the return value is zero. To get extended error information, call
                    <see cref="M:PInvoke.Kernel32.GetLastError" />.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetTokenInformation(PInvoke.Kernel32.SafeObjectHandle,PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS,System.Void*,System.Int32,System.Int32@)">
            <summary>
                The GetTokenInformation function retrieves a specified type of information about an access token. The calling
                process must have appropriate access rights to obtain the information.
                <para>
                    To determine if a user is a member of a specific group, use the CheckTokenMembership function. To determine
                    group membership for app container tokens, use the CheckTokenMembershipEx function.
                </para>
            </summary>
            <param name="TokenHandle">
                A handle to an access token from which information is retrieved. If TokenInformationClass
                specifies TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values,
                the handle must have TOKEN_QUERY access.
            </param>
            <param name="TokenInformationClass">
                Specifies a value from the TOKEN_INFORMATION_CLASS enumerated type to identify the
                type of information the function retrieves. Any callers who check the TokenIsAppContainer and have it return 0
                should also verify that the caller token is not an identify level impersonation token. If the current token is not
                an app container but is an identity level token, you should return AccessDenied.
            </param>
            <param name="TokenInformation">
                A pointer to a buffer the function fills with the requested information. The structure
                put into this buffer depends upon the type of information specified by the
                <paramref name="TokenInformationClass" /> parameter.
            </param>
            <param name="TokenInformationLength">
                Specifies the size, in bytes, of the buffer pointed to by the TokenInformation
                parameter. If <paramref name="TokenInformation" /> is NULL, this parameter must be zero.
            </param>
            <param name="ReturnLength">
                A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the TokenInformation
                parameter. If this value is larger than the value specified in the TokenInformationLength parameter, the function
                fails and stores no data in the buffer.
                <para>
                    If the value of the <paramref name="TokenInformationClass" /> parameter is
                    <see cref="F:PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenDefaultDacl" /> and the token has no default DACL, the function sets
                    the variable pointed to by ReturnLength to sizeof(TOKEN_DEFAULT_DACL) and sets the DefaultDacl member of the
                    TOKEN_DEFAULT_DACL structure to NULL.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
                <para>
                    If the function fails, the return value is zero. To get extended error information, call
                    <see cref="M:PInvoke.Kernel32.GetLastError" />.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.QueryServiceObjectSecurity(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Byte[],System.Int32,System.Int32@)">
            <summary>
                The QueryServiceObjectSecurity function retrieves a copy of the security descriptor associated with a service
                object. You can also use the GetNamedSecurityInfo function to retrieve a security descriptor.
            </summary>
            <param name="hService">
                A handle to the service control manager or the service. Handles to the service control manager
                are returned by the <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)" /> function, and handles to a service are returned by either the
                <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)" /> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)" /> function. The handle must have the READ_CONTROL access
                right.
            </param>
            <param name="dwSecurityInformation">
                A set of bit flags that indicate the type of security information to retrieve. This
                parameter can be a combination of the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION" /> flags, with the exception that this
                function does not support the <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.LABEL_SECURITY_INFORMATION" /> value.
            </param>
            <param name="lpSecurityDescriptor">
                A pointer to a buffer that receives a copy of the security descriptor of the
                specified service object. The calling process must have the appropriate access to view the specified aspects of the
                security descriptor of the object. The SECURITY_DESCRIPTOR structure is returned in self-relative format.
            </param>
            <param name="cbBufSize">
                The size of the buffer pointed to by the <paramref name="lpSecurityDescriptor" /> parameter, in
                bytes. The largest size allowed is 8 kilobytes.
            </param>
            <param name="pcbBytesNeeded">
                A pointer to a variable that receives the number of bytes needed to return the requested
                security descriptor information, if the function fails.
            </param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
                <para>
                    If the function fails, the return value is zero. To get extended error information, call
                    <see cref="M:PInvoke.Kernel32.GetLastError" />.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.QueryServiceStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SERVICE_STATUS@)">
            <summary>
            Retrieves the current status of the specified service.
            This function has been superseded by the <see cref="M:PInvoke.AdvApi32.QueryServiceStatusEx(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SC_STATUS_TYPE,System.Void*,System.Int32,System.Int32@)"/> function. <see cref="M:PInvoke.AdvApi32.QueryServiceStatusEx(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SC_STATUS_TYPE,System.Void*,System.Int32,System.Int32@)"/> returns the same information <see cref="M:PInvoke.AdvApi32.QueryServiceStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SERVICE_STATUS@)"/> returns, with the addition of the process identifier and additional information for the service.
            </summary>
            <param name="hService">
            A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or the <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function, and it must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_QUERY_STATUS"/> access right.
            </param>
            <param name="dwServiceStatus">
            A pointer to a <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS"/> structure that receives the status information.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetServiceObjectSecurity(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Byte[])">
            <summary>The SetServiceObjectSecurity function sets the security descriptor of a service object.</summary>
            <param name="hService">
                A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)" /> or
                <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)" /> function. The access required for this handle depends on the security information
                specified in the <paramref name="dwSecurityInformation" /> parameter.
            </param>
            <param name="dwSecurityInformation">
                Specifies the components of the security descriptor to set. This parameter can be a
                combination of the following values : <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.DACL_SECURITY_INFORMATION" />,
                <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.GROUP_SECURITY_INFORMATION" />,
                <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.OWNER_SECURITY_INFORMATION" />,
                <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.SACL_SECURITY_INFORMATION" />. Note that flags not handled by
                SetServiceObjectSecurity will be silently ignored.
            </param>
            <param name="lpSecurityDescriptor">
                A pointer to a SECURITY_DESCRIPTOR structure that contains the new security
                information.
            </param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
                <para>
                    If the function fails, the return value is zero. To get extended error information, call
                    <see cref="M:PInvoke.Kernel32.GetLastError" />.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetServiceStatus(System.IntPtr,PInvoke.AdvApi32.SERVICE_STATUS@)">
            <summary>
            Updates the service control manager's status information for the calling service.
            </summary>
            <param name="hServiceStatus">
            A handle to the status information structure for the current service.
            This handle is returned by the RegisterServiceCtrlHandlerEx function.
            The service status handle does not have to be closed.
            </param>
            <param name="lpServiceStatus">
            A pointer to the <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS"/> structure the contains the latest status information for the calling service.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call GetLastError.
            The following error codes can be set by the service control manager.
            Other error codes can be set by the registry functions that are called by the service control manager.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_DATA"/>
            </item>
            <item>
            <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_HANDLE"/>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.Byte*,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Enumerates services in the specified service control manager database.
            The name and status of each service are provided.
            This function has been superseded by the EnumServicesStatusEx function.
            It returns the same information <see cref="M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.Byte*,System.Int32,System.Int32@,System.Int32@,System.Int32@)"/> returns, plus the process identifier and additional information for the service.
            In addition, EnumServicesStatusEx enables you to enumerate services that belong to a specified group.
            </summary>
            <param name="hSCManager">
            A handle to the service control manager database.
            This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function, and must have the <see cref="F:PInvoke.AdvApi32.ServiceManagerAccess.SC_MANAGER_ENUMERATE_SERVICE"/> access right.
            </param>
            <param name="dwServiceType">
            The type of services to be enumerated.
            This parameter can be one or more of the following values.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_DRIVER"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_FILE_SYSTEM_DRIVER"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_KERNEL_DRIVER"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS"/>
            </item>
            </list>
            </param>
            <param name="dwServiceState">
            The state of the services to be enumerated.
            This parameter can be one of the following values.
            <list type="bullet">
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_ACTIVE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_INACTIVE"/>
            </item>
            <item>
            <see cref="F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_STATE_ALL"/>
            </item>
            </list>
            </param>
            <param name="lpServices">
            A pointer to a buffer that contains an array of <see cref="T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS"/> structures that receive the name and service status information for each service in the database.
            The buffer must be large enough to hold the structures, plus the strings to which their members point.
            The maximum size of this array is 256K bytes.
            To determine the required size, specify NULL for this parameter and 0 for the <paramref name="cbBufSize" /> parameter.
            The function will fail and <see cref="M:PInvoke.Kernel32.GetLastError"/> will return <see cref="F:PInvoke.Win32ErrorCode.ERROR_INSUFFICIENT_BUFFER"/>.
            The <paramref name="pcbBytesNeeded"/> parameter will receive the required size.
            Windows Server 2003 and Windows XP:  The maximum size of this array is 64K bytes.
            This limit was increased as of Windows Server 2003 with SP1 and Windows XP with SP2.
            </param>
            <param name="cbBufSize">
            The size of the buffer pointed to by the <paramref name="lpServices"/> parameter, in bytes.
            </param>
            <param name="pcbBytesNeeded">
            A pointer to a variable that receives the number of bytes needed to return the remaining service entries, if the buffer is too small.
            </param>
            <param name="lpServicesReturned">
            A pointer to a variable that receives the number of service entries returned.
            </param>
            <param name="lpResumeHandle">
            A pointer to a variable that, on input, specifies the starting point of enumeration.
            You must set this value to zero the first time this function is called. On output, this value is zero if the function succeeds.
            However, if the function returns zero and the <see cref="M:PInvoke.Kernel32.GetLastError"/> function returns <see cref="F:PInvoke.Win32ErrorCode.ERROR_MORE_DATA"/>,
            this value is used to indicate the next service entry to be read when the function is called to retrieve the additional data.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call <see cref="M:PInvoke.Kernel32.GetLastError"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.LsaNtStatusToWinError(PInvoke.NTSTATUS)">
            <summary>
            Converts an NTSTATUS code returned by an LSA function to a Windows error code.
            </summary>
            <param name="Status">An NTSTATUS code returned by an LSA function call. This value will be converted to a System error code.</param>
            <returns>
            The return value is the Windows error code that corresponds to the Status parameter. If there is no corresponding Windows error code, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_MR_MID_NOT_FOUND"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,PInvoke.AdvApi32.RegOpenKeyOptions,PInvoke.Kernel32.ACCESS_MASK,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)">
            <summary>
                Opens the specified registry key. Note that key names are not case sensitive.
                <para>To perform transacted registry operations on a key, call the RegOpenKeyTransacted function.</para>
            </summary>
            <param name="hKey">
                A handle to an open registry key.
                <para>
                    This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, <see cref="M:PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,PInvoke.AdvApi32.RegOpenKeyOptions,PInvoke.Kernel32.ACCESS_MASK,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)" />, or
                    RegOpenKeyTransacted function. It can also be one of the following predefined keys:
                    <see cref="F:PInvoke.AdvApi32.HKEY_CLASSES_ROOT" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_CONFIG" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_USER" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_LOCAL_MACHINE" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_PERFORMANCE_DATA" /> and
                    <see cref="F:PInvoke.AdvApi32.HKEY_USERS" />
                </para>
            </param>
            <param name="lpSubKey">
                The name of the registry subkey to be opened.
                <para>Key names are not case sensitive.</para>
                <para>
                    The lpSubKey parameter can be an empty string. If lpSubKey is a pointer to an empty string and
                    <paramref name="hKey" /> is <see cref="F:PInvoke.AdvApi32.HKEY_CLASSES_ROOT" />, <paramref name="phkResult" /> receives the same
                    <paramref name="hKey" /> handle passed into the function. Otherwise, <paramref name="phkResult" /> receives a
                    new handle to the key specified by <paramref name="hKey" />.
                </para>
                <para>
                    The lpSubKey parameter can be <c>null</c> only if hKey is one of the predefined keys. If lpSubKey is
                    <c>null</c> and hKey is <see cref="F:PInvoke.AdvApi32.HKEY_CLASSES_ROOT" />, <paramref name="phkResult" /> receives a new handle
                    to the key specified by <paramref name="hKey" />. Otherwise, <paramref name="phkResult" /> receives the same
                    <paramref name="hKey" /> handle passed in to the function.
                </para>
            </param>
            <param name="ulOptions">Specifies the option to apply when opening the key.</param>
            <param name="samDesired">
                A mask that specifies the desired access rights to the key to be opened. The function fails if
                the security descriptor of the key does not permit the requested access for the calling process.
            </param>
            <param name="phkResult">
                A variable that receives a handle to the opened key. If the key is not one of the predefined
                registry keys, it should be disposed after you have finished using the handle.
            </param>
            <returns>
                If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS" />. If the function
                fails the error code is returned.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.RegFlushKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle)">
            <summary>Writes all the attributes of the specified open registry key into the registry.</summary>
            <param name="hKey">
                A handle to an open registry key. The key must have been opened with the <see cref="F:PInvoke.AdvApi32.KEY_QUERY_VALUE" /> access
                right.
                <para>
                    This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, <see cref="M:PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,PInvoke.AdvApi32.RegOpenKeyOptions,PInvoke.Kernel32.ACCESS_MASK,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)" />, or
                    RegOpenKeyTransacted function. It can also be one of the following predefined keys:
                    <see cref="F:PInvoke.AdvApi32.HKEY_CLASSES_ROOT" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_CONFIG" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_USER" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_LOCAL_MACHINE" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_PERFORMANCE_DATA" /> and
                    <see cref="F:PInvoke.AdvApi32.HKEY_USERS" />
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS" />. If the function
                fails the error code is returned.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.RegNotifyChangeKeyValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.Boolean,PInvoke.AdvApi32.RegNotifyFilter,Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Boolean)">
            <summary>Notifies the caller about changes to the attributes or contents of a specified registry key.</summary>
            <param name="hKey">
                A handle to an open registry key.
                <para>
                    This handle is returned by the RegCreateKeyEx, RegCreateKeyTransacted, <see cref="M:PInvoke.AdvApi32.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.String,PInvoke.AdvApi32.RegOpenKeyOptions,PInvoke.Kernel32.ACCESS_MASK,Microsoft.Win32.SafeHandles.SafeRegistryHandle@)" />, or
                    RegOpenKeyTransacted function. It can also be one of the following predefined keys:
                    <see cref="F:PInvoke.AdvApi32.HKEY_CLASSES_ROOT" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_CONFIG" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_USER" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_LOCAL_MACHINE" />,
                    <see cref="F:PInvoke.AdvApi32.HKEY_PERFORMANCE_DATA" /> and
                    <see cref="F:PInvoke.AdvApi32.HKEY_USERS" />
                </para>
                <para>
                    This parameter must be a local handle. If <see cref="M:PInvoke.AdvApi32.RegNotifyChangeKeyValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle,System.Boolean,PInvoke.AdvApi32.RegNotifyFilter,Microsoft.Win32.SafeHandles.SafeWaitHandle,System.Boolean)" /> is called with a remote
                    handle, it returns <see cref="F:PInvoke.Win32ErrorCode.ERROR_INVALID_HANDLE" />.
                </para>
                <para>The key must have been opened with the <see cref="F:PInvoke.AdvApi32.KEY_NOTIFY" /> access right.</para>
            </param>
            <param name="bWatchSubtree">
                If this parameter is <c>true</c>, the function reports changes in the specified key and its
                subkeys. If the parameter is <c>false</c>, the function reports changes only in the specified key.
            </param>
            <param name="dwNotifyFilter">A value that indicates the changes that should be reported.</param>
            <param name="hEvent">
                A handle to an event. If the <paramref name="fAsynchronous" /> parameter is <c>true</c>, the
                function returns immediately and changes are reported by signaling this event. If <paramref name="fAsynchronous" />
                is <c>false</c>, hEvent is ignored.
            </param>
            <param name="fAsynchronous">
                If this parameter is <c>true</c>, the function returns immediately and reports changes by
                signaling the specified event. If this parameter is <c>false</c>, the function does not return until a change has
                occurred.
                <para>
                    If <paramref name="hEvent" /> does not specify a valid event, the fAsynchronous parameter cannot be
                    <c>true</c>.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS" />. If the function
                fails the error code is returned.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.QueryServiceStatusEx(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SC_STATUS_TYPE,System.Void*,System.Int32,System.Int32@)">
            <summary>
            Retrieves the current status of the specified service based on the specified information level.
            </summary>
            <param name="hService">
            A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> or <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function, and it must have the <see cref="F:PInvoke.AdvApi32.ServiceAccess.SERVICE_QUERY_STATUS"/> access right. For more information, see Service Security and Access Rights.
            </param>
            <param name="InfoLevel">
            The service attributes to be returned. Use <see cref="F:PInvoke.AdvApi32.SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO"/> to retrieve the service status information.
            The <paramref name="lpBuffer"/> parameter is a pointer to a <see cref="T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS"/> structure.</param>
            <param name="lpBuffer">
            A pointer to the buffer that receives the status information. The format of this data depends on the value of the <paramref name="InfoLevel"/> parameter.
            The maximum size of this array is 8K bytes. To determine the required size, specify NULL for this parameter and 0 for the <paramref name="cbBufSize" /> parameter.The function will fail and <see cref="M:PInvoke.Kernel32.GetLastError"/> will return ERROR_INSUFFICIENT_BUFFER.The <paramref name="pcbBytesNeeded" /> parameter will receive the required size.
            </param>
            <param name="cbBufSize">
            The size of the buffer pointed to by the <paramref name="lpBuffer"/> parameter, in bytes.
            </param>
            <param name="pcbBytesNeeded">
            A pointer to a variable that receives the number of bytes needed to store all status information, if the function fails with <see cref="F:PInvoke.Win32ErrorCode.ERROR_INSUFFICIENT_BUFFER"/>.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call <see cref="M:PInvoke.Kernel32.GetLastError"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.RegisterServiceCtrlHandler(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION)">
            <summary>
            Registers a function to handle service control requests.
            </summary>
            <param name="lpServiceName">
            The name of the service run by the calling thread. This is the service name that the service control program specified in the CreateService function when creating the service.
            If the service type is SERVICE_WIN32_OWN_PROCESS, the function does not verify that the specified name is valid, because there is only one registered service in the process.
            </param>
            <param name="lpHandlerProc">A reference to the handler function to be registered.</param>
            <returns>If the function succeeds, the return value is a service status handle If the function fails, the return value is zero. </returns>
            <remarks>
            This function has been superseded by the <see cref="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)"/> function.
            A service can use either function, but the new function supports user-defined context data, and the new handler function supports additional extended control codes.
            </remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)">
            <summary>
            Registers a function to handle extended service control requests.
            </summary>
            <param name="lpServiceName">
            The name of the service run by the calling thread. This is the service name that the service control program specified in the CreateService function when creating the service.
            </param>
            <param name="lpHandlerProc">A reference to the handler function to be registered.</param>
            <param name="lpContext">Any user-defined data. This parameter, which is passed to the handler function, can help identify the service when multiple services share a process.</param>
            <returns>If the function succeeds, the return value is a service status handle If the function fails, the return value is zero. </returns>
            <remarks>
            This function has been superseded by the <see cref="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)"/> function.
            A service can use either function, but the new function supports user-defined context data, and the new handler function supports additional extended control codes.
            </remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.GetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.SECURITY_DESCRIPTOR*)">
            <summary>
            The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.
            </summary>
            <param name="handle">A handle to the object from which to retrieve security information.</param>
            <param name="ObjectType">SE_OBJECT_TYPE enumeration value that indicates the type of object.</param>
            <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name="ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref="M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name="ppsidOwner"/>, <paramref name="ppsidGroup"/>, <paramref name="ppDacl"/>, or <paramref name="ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.SECURITY_DESCRIPTOR*)">
            <summary>
            The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.
            </summary>
            <param name="pObjectName">Specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see <see cref="T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name="ObjectType">Specifies a value from the <see cref="T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name="pObjectName"/> parameter.</param>
            <param name="SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name="ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name="ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name="ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name="ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name="ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref="M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name="ppsidOwner"/>, <paramref name="ppsidGroup"/>, <paramref name="ppDacl"/>, or <paramref name="ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*)">
            <summary>
            The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.
            To set the SACL of an object, the caller must have the SE_SECURITY_NAME privilege enabled.
            </summary>
            <param name="handle">A handle to the object for which to set security information.</param>
            <param name="ObjectType">A member of the SE_OBJECT_TYPE enumeration that indicates the type of object identified by the handle parameter.</param>
            <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name="psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name="pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name="pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,PInvoke.Kernel32.ACL*,PInvoke.Kernel32.ACL*)">
            <summary>
            The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.
            </summary>
            <param name="pObjectName">Specifies the name of the object from which to set security information. For descriptions of the string formats for the different object types, see <see cref="T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name="ObjectType">Specifies a value from the <see cref="T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name="pObjectName"/> parameter.</param>
            <param name="SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name="psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name="psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name="pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name="pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.DuplicateTokenEx(PInvoke.Kernel32.SafeObjectHandle,PInvoke.Kernel32.ACCESS_MASK,PInvoke.Kernel32.SECURITY_ATTRIBUTES*,PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL,PInvoke.AdvApi32.TOKEN_TYPE,PInvoke.Kernel32.SafeObjectHandle@)">
            <summary>
            The DuplicateTokenEx function creates a new access token that duplicates an existing token.
            This function can create either a primary token or an impersonation token.
            </summary>
            <param name="hExistingToken">A handle to an access token opened with <see cref="F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_DUPLICATE"/>
            access.</param>
            <param name="dwDesiredAccess">Specifies the requested access rights for the new token. The <see cref="M:PInvoke.AdvApi32.DuplicateTokenEx(PInvoke.Kernel32.SafeObjectHandle,PInvoke.Kernel32.ACCESS_MASK,PInvoke.Kernel32.SECURITY_ATTRIBUTES*,PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL,PInvoke.AdvApi32.TOKEN_TYPE,PInvoke.Kernel32.SafeObjectHandle@)"/> function
            compares the requested access rights with the existing token's discretionary access control list (DACL) to determine
            which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request
            all access rights that are valid for the caller, specify <see cref="F:PInvoke.Kernel32.ACCESS_MASK.SpecialRight.MAXIMUM_ALLOWED"/>.</param>
            <param name="lpTokenAttributes">A pointer to a <see cref="T:PInvoke.Kernel32.SECURITY_ATTRIBUTES"/> structure that specifies a security
            descriptor for the new token and determines whether child processes can inherit the token.
            If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited.
            If the security descriptor contains a system access control list (SACL), the token gets
            <see cref="F:PInvoke.Kernel32.ACCESS_MASK.SpecialRight.ACCESS_SYSTEM_SECURITY"/> access right, even if it was not requested in dwDesiredAccess.
            To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME
            privilege set.</param>
            <param name="ImpersonationLevel">Specifies a value from the <see cref="T:PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL"/>
            enumeration that indicates the impersonation level of the new token.</param>
            <param name="TokenType">pecifies one of the following values from the <see cref="T:PInvoke.AdvApi32.TOKEN_TYPE"/> enumeration.</param>
            <param name="phNewToken">A pointer to a <see cref="T:PInvoke.Kernel32.SafeObjectHandle"/> variable that receives the new token.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptAcquireContext(PInvoke.AdvApi32.SafeCryptographicProviderHandle@,System.String,System.String,PInvoke.AdvApi32.ProviderType,PInvoke.AdvApi32.CryptAcquireContextFlags)">
            <summary>
            The <see cref="M:PInvoke.AdvApi32.CryptAcquireContext(PInvoke.AdvApi32.SafeCryptographicProviderHandle@,System.String,System.String,PInvoke.AdvApi32.ProviderType,PInvoke.AdvApi32.CryptAcquireContextFlags)"/> function is used to acquire a handle to a particular key container within a particular cryptographic service provider (CSP).
            This returned handle is used in calls to CryptoAPI functions that use the selected CSP.
            </summary>
            <param name="hProv">A pointer to a handle of a CSP. When you have finished using the CSP, release the handle by calling the <see cref="M:PInvoke.AdvApi32.CryptReleaseContext(System.IntPtr,System.UInt32)"/> function.</param>
            <param name="pszContainer">
            The key container name. This is a null-terminated string that identifies the key container to the CSP. This name is independent of the method used to store the keys. Some CSPs store their key containers internally (in hardware), some use the system registry, and others use the file system. In most cases, when <paramref name="dwFlags"/> is set to CRYPT_VERIFYCONTEXT, <paramref name="pszContainer"/> must be set to NULL. However, for hardware-based CSPs, such as a smart card CSP, can be access publically available information in the specfied container.
            </param>
            <param name="pszProvider">
            A null-terminated string that contains the name of the CSP to be used.
            If this parameter is NULL, the user default provider is used. For more information, see Cryptographic Service Provider Contexts. For a list of available cryptographic providers, see Cryptographic Provider Names.
            An application can obtain the name of the CSP in use by using the CryptGetProvParam function to read the PP_NAME CSP value in the dwParam parameter.
            The default CSP can change between operating system releases. To ensure interoperability on different operating system platforms, the CSP should be explicitly set by using this parameter instead of using the default CSP.
            </param>
            <param name="dwProvType">Specifies the type of provider to acquire. Defined provider types are discussed in Cryptographic Provider Types.</param>
            <param name="dwFlags">Flag values. This parameter is usually set to zero, but some applications set one or more of the allowed flags.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
            <remarks>
            This function first attempts to find a CSP with the characteristics described in the <paramref name="dwProvType" /> and <paramref name="pszProvider" /> parameters.
            If the CSP is found, the function attempts to find a key container within the CSP that matches the name specified by the <paramref name="pszContainer"/> parameter.
            To acquire the context and the key container of a private key associated with the public key of a certificate, use CryptAcquireCertificatePrivateKey.
            With the appropriate setting of <paramref name="dwFlags"/>, this function can also create and destroy key containers and can provide access to a CSP with a
            temporary key container if access to a private key is not required.
            </remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptCreateHash(PInvoke.AdvApi32.SafeCryptographicProviderHandle,PInvoke.AdvApi32.ALG_ID,PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptCreateHashFlags,PInvoke.AdvApi32.SafeHashHandle@)">
            <summary>
            The <see cref="M:PInvoke.AdvApi32.CryptCreateHash(PInvoke.AdvApi32.SafeCryptographicProviderHandle,PInvoke.AdvApi32.ALG_ID,PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptCreateHashFlags,PInvoke.AdvApi32.SafeHashHandle@)"/> function initiates the hashing of a stream of data. It creates and returns to the calling application a handle to a cryptographic service provider (CSP) hash object.
            This handle is used in subsequent calls to <see cref="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> and CryptHashSessionKey to hash session keys and other streams of data.
            </summary>
            <param name="hProv">A handle to a CSP created by a call to <see cref="M:PInvoke.AdvApi32.CryptAcquireContext(PInvoke.AdvApi32.SafeCryptographicProviderHandle@,System.String,System.String,PInvoke.AdvApi32.ProviderType,PInvoke.AdvApi32.CryptAcquireContextFlags)"/>.</param>
            <param name="algId">
            An <see cref="T:PInvoke.AdvApi32.ALG_ID"/> value that identifies the hash algorithm to use.
            Valid values for this parameter vary, depending on the CSP that is used. For a list of default algorithms, see Remarks
            </param>
            <param name="hKey">
            If the type of hash algorithm is a keyed hash, such as the Hash-Based Message Authentication Code (HMAC) or Message Authentication Code (MAC) algorithm, the key for the hash is passed in this parameter.
            For nonkeyed algorithms, this parameter must be set to zero.
            For keyed algorithms, the key must be to a block cipher key, such as RC2, that has a cipher mode of Cipher Block Chaining (CBC).
            </param>
            <param name="dwFlags">Hashing flags</param>
            <param name="phHash">
            The address to which the function copies a handle to the new hash object. When you have finished using the hash object, dispose the safe handle.
            </param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)">
            <summary>
            The <see cref="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> function adds data to a specified hash object.
            This function and CryptHashSessionKey can be called multiple times to compute the hash of long or discontinuous data streams.
            </summary>
            <param name="hHash">Handle of the hash object.</param>
            <param name="pbData">A pointer to a buffer that contains the data to be added to the hash object.</param>
            <param name="dataLen">Number of bytes of data to be added. This must be zero if the <see cref="F:PInvoke.AdvApi32.CryptHashDataFlags.CRYPT_USERDATA" /> flag is set.</param>
            <param name="flags">Hashing flags</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetHashParam(PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptGetHashParamFlags,System.Byte*,System.Int32*,System.UInt32)">
            <summary>
                Get parameters of a hash
            </summary>
            <param name="hHash">Handle of the hash object to be queried.</param>
            <param name="dwParam">Query type.</param>
            <param name="pbData">
            A pointer to a buffer that receives the specified value data. The form of this data varies, depending on the value number.
            This parameter can be NULL to determine the memory size required.
            </param>
            <param name="pdwDataLen">
            A pointer to a DWORD value specifying the size, in bytes, of the <paramref name="pbData"/> buffer. When the function returns, the DWORD value contains the number of bytes stored in the buffer.
            If <paramref name="pbData"/> is NULL, set the value of <paramref name="pdwDataLen" /> to zero.
            </param>
            <param name="dwFlags">Reserved for future use and must be zero.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.RegCloseKey(System.IntPtr)">
            <summary>
            Closes a handle to the specified registry key.
            </summary>
            <param name="hKey">A handle to the open key to be closed. The handle must have been opened by the RegCreateKeyEx, RegCreateKeyTransacted, RegOpenKeyEx, RegOpenKeyTransacted, or RegConnectRegistry function.</param>
            <returns>
            If the function succeeds, the return value is <see cref="F:PInvoke.Win32ErrorCode.ERROR_SUCCESS" />.
            If the function fails, the return value is a nonzero error code defined in Winerror.h. You can use the FormatMessage function with the FORMAT_MESSAGE_FROM_SYSTEM flag to get a generic description of the error.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptDestroyHash(System.IntPtr)">
            <summary>
                Destroy a hashing provider
            </summary>
            <param name="hHash">The hashing provider to destroy</param>
            <returns>The result of destroying the hash provider</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.ConvertSidToStringSid(System.IntPtr,System.Char*@)">
            <summary>
            The ConvertSidToStringSid function converts a security identifier (SID) to a string format suitable for display, storage, or transmission.
            To convert the string-format SID back to a valid, functional SID, call the <see cref="M:PInvoke.AdvApi32.ConvertStringSidToSid(System.String,System.Void*@)"/> function.
            </summary>
            <param name="sid">A pointer to the SID structure to be converted.</param>
            <param name="sidString">A pointer to a variable that receives a pointer to a null-terminated SID string. To free the returned buffer, call the <see cref="M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.</param>
            <returns>If the function succeeds, the return value is true, otherwise the return value is false.</returns>
            <remarks>The ConvertSidToStringSid function uses the standard S-R-I-S-S… format for SID strings.</remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.ConvertStringSidToSid(System.String,System.Void*@)">
            <summary>
            The ConvertStringSidToSid function converts a string-format security identifier (SID) into a valid, functional SID.
            You can use this function to retrieve a SID that the <see cref="M:PInvoke.AdvApi32.ConvertSidToStringSid(System.IntPtr,System.Char*@)"/> function converted to string format.
            </summary>
            <param name="StringSid">The string-format SID to convert. The SID string can use either the standard S-R-I-S-S… format for SID strings, or the SID string constant format, such as "BA" for built-in administrators.</param>
            <param name="sid">A pointer to a variable that receives a pointer to the converted SID. To free the returned buffer, call the <see cref="M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.</param>
            <returns>If the function succeeds, the return value is true, otherwise the return value is false.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CloseServiceHandle(System.IntPtr)">
            <summary>
            Closes a handle to a service control manager or service object.
            </summary>
            <param name="hSCObject">
            A handle to the service control manager object or the service object to close.
            Handles to service control manager objects are returned by the <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function,
            and handles to service objects are returned by either the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptReleaseContext(System.IntPtr,System.UInt32)">
            <summary>
            Releases the handle of a cryptographic service provider (CSP) and a key container. At each call to this function, the reference count on the CSP is reduced by one.
            When the reference count reaches zero, the context is fully released and it can  no longer be used by any function in the application.
            An application calls this function after finishing the use of the CSP. After this function is called,
            the released CSP handle is no longer valid.This function does not destroy key containers or key pairs.
            </summary>
            <param name="hProv">Handle of a cryptographic service provider (CSP) created by a call to CryptAcquireContext.</param>
            <param name="dwFlags">Reserved for future use and must be zero. If dwFlags is not set to zero, this function returns FALSE but the CSP is released.</param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.EnumServicesStatus">
            <summary>
            Enumerates services in the specified service control manager database.
            The name and status of each service are provided.
            </summary>
            <returns>
            An IEnumerable of <see cref="T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS"/> structures that receive the name and service status information for each service in the database.
            </returns>
            <exception cref="T:PInvoke.Win32Exception">If the method fails, returning the calling thread's last-error code value.</exception>
        </member>
        <member name="M:PInvoke.AdvApi32.QueryServiceObjectSecurity(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SECURITY_INFORMATION)">
            <summary>
                Retrieves a copy of the security descriptor associated with a service object. You can also use the
                GetNamedSecurityInfo function to retrieve a security descriptor.
            </summary>
            <param name="hService">
                A handle to the service control manager or the service. Handles to the service control manager
                are returned by the <see cref="M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)" /> function, and handles to a service are returned by either the
                <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)" /> or <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)" /> function. The handle must have the READ_CONTROL access
                right.
            </param>
            <param name="dwSecurityInformation">
                A set of bit flags that indicate the type of security information to retrieve. This
                parameter can be a combination of the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION" /> flags, with the exception that this
                function does not support the <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.LABEL_SECURITY_INFORMATION" /> value.
            </param>
            <returns>
                A copy of the security descriptor of the specified service object. The calling process must have the
                appropriate access to view the specified aspects of the security descriptor of the object.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hService" /> is NULL.</exception>
            <exception cref="T:PInvoke.Win32Exception">If the call to the native method fails fails.</exception>
        </member>
        <member name="M:PInvoke.AdvApi32.SetServiceObjectSecurity(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Security.AccessControl.RawSecurityDescriptor)">
            <summary>The SetServiceObjectSecurity function sets the security descriptor of a service object.</summary>
            <param name="hService">
                A handle to the service. This handle is returned by the <see cref="M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)" /> or
                <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)" /> function. The access required for this handle depends on the security information
                specified in the <paramref name="dwSecurityInformation" /> parameter.
            </param>
            <param name="dwSecurityInformation">
                Specifies the components of the security descriptor to set. This parameter can be a
                combination of the following values : <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.DACL_SECURITY_INFORMATION" />,
                <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.GROUP_SECURITY_INFORMATION" />,
                <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.OWNER_SECURITY_INFORMATION" />,
                <see cref="F:PInvoke.AdvApi32.SECURITY_INFORMATION.SACL_SECURITY_INFORMATION" />. Note that flags not handled by
                SetServiceObjectSecurity will be silently ignored.
            </param>
            <param name="lpSecurityDescriptor">The new security information.</param>
        </member>
        <member name="M:PInvoke.AdvApi32.CreateService(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a service object and adds it to service control manager database o the local computer.
            </summary>
            <param name="lpBinaryPathName">
            The fully qualified path to the service binary file. If the path contains a space, it must be quoted so that it is correctly interpreted.
            For example, "d:\\my share\\myservice.exe" should be specified as "\"d:\\my share\\myservice.exe\"".
            The path can also include arguments for an auto-start service.
            For example, "d:\\myshare\\myservice.exe arg1 arg2".
            These arguments are passed to the service entry point (typically the main function).
            </param>
            <param name="lpServiceName">
            The name of the service to install. The maximum string length is 256 characters.
            The service control manager database preserves the case of the characters, but service name comparisons are always case insensitive.
            Forward-slash (/) and backslash (\) are not valid service name characters.
            </param>
            <param name="lpDisplayName">
            The display name to be used by user interface programs to identify the service.
            This string has a maximum length of 256 characters. The name is case-preserved in the service control manager.
            Display name comparisons are always case-insensitive.
            </param>
            <param name="lpDescription">
            The description of the service. If this member is NULL, the description remains unchanged.
            If this value is an empty string (""), the current description is deleted.
            The service description must not exceed the size of a registry value of type REG_SZ.
            </param>
            <param name="lpServiceStartName">
            The name of the account under which the service should run.
            Use an account name in the form DomainName\UserName. The service process will be logged on as this user.
            If the account belongs to the built-in domain, you can specify .\UserName.
            </param>
            <param name="lpPassword">
            The password to the account name specified by the lpServiceStartName parameter.
            Specify an empty string if the account has no password or if the service runs in the LocalService, NetworkService, or LocalSystem account.
            If the account name specified by the <paramref name="lpServiceStartName"/> parameter is the name of a managed service account or virtual account name, the lpPassword parameter must be NULL.
            </param>
            <exception cref="T:PInvoke.Win32Exception">If the method fails, returning the calling thread's last-error code value.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="lpServiceName" /> or <paramref name="lpBinaryPathName"/> are NULL or empty string.</exception>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.UInt32)">
            <summary>
            Retrieves parameters that govern the operations of a cryptographic service provider (CSP).
            </summary>
            <param name="hProv">A handle of the CSP target of the query. This handle must have been created by using the CryptAcquireContext function.</param>
            <param name="dwParam">The nature of the query.</param>
            <param name="dwFlags">
            If <paramref name="dwParam"/> is <see cref="F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, the security descriptor on the key container where the keys are stored is retrieved.
            For this case, <paramref name="dwFlags"/> is used to pass in the <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags that indicate the requested security information,
            as defined in the Platform SDK. <see cref="T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags can be combined with a bitwise-OR operation.
            </param>
            <returns>The property value.</returns>
            <exception cref="T:PInvoke.Win32Exception">Thrown when an error occurs.</exception>
        </member>
        <member name="M:PInvoke.AdvApi32.DeleteService(System.String)">
            <summary>
            Marks the specified service for deletion from the service control manager database on the local computer.
            </summary>
            <param name="lpServiceName">
            The name of the service to be opened. This is the name specified by the lpServiceName parameter of the <see cref="M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function when the service object was created,
            not the service display name that is shown by user interface applications to identify the service.
            The maximum string length is 256 characters. The service control manager database preserves the case of the characters,
            but service name comparisons are always case insensitive. Forward-slash (/) and backslash (\) are invalid service name characters.
            </param>
            <exception cref="T:PInvoke.Win32Exception">If the method fails, returning the calling thread's last-error code value.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="lpServiceName" /> is NULL or an empty string.</exception>
        </member>
        <member name="M:PInvoke.AdvApi32.GetTokenElevationType(PInvoke.Kernel32.SafeObjectHandle)">
            <summary>Get the elevation type of a token via <see cref="M:PInvoke.AdvApi32.GetTokenInformation(PInvoke.Kernel32.SafeObjectHandle,PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS,System.Void*,System.Int32,System.Int32@)" />.</summary>
            <param name="TokenHandle">
                A handle to an access token from which information is retrieved. The handle must have
                TOKEN_QUERY access.
            </param>
            <returns>The token elevation type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="TokenHandle" /> is NULL.</exception>
            <exception cref="T:PInvoke.Win32Exception">If the call to <see cref="M:PInvoke.AdvApi32.GetTokenInformation(PInvoke.Kernel32.SafeObjectHandle,PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS,System.Void*,System.Int32,System.Int32@)" /> fails.</exception>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_CREATE_LINK">
            <summary>Reserved for system use.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_CREATE_SUB_KEY">
            <summary>Required to create a subkey of a registry key.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_ENUMERATE_SUB_KEYS">
            <summary>Required to enumerate the subkeys of a registry key.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_NOTIFY">
            <summary>Required to request change notifications for a registry key or for subkeys of a registry key.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_QUERY_VALUE">
            <summary>Required to query the values of a registry key.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_SET_VALUE">
            <summary>Required to create, delete, or set a registry value.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_WOW64_32KEY">
            <summary>
                Indicates that an application on 64-bit Windows should operate on the 32-bit registry view. This flag is ignored by
                32-bit Windows.
                <para>
                    This flag must be combined using the OR operator with the other flags in this table that either query or
                    access registry values.
                </para>
                <para>Windows 2000:  This flag is not supported.</para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_WOW64_64KEY">
            <summary>
                Indicates that an application on 64-bit Windows should operate on the 64-bit registry view. This flag is ignored by
                32-bit Windows.
                <para>
                    This flag must be combined using the OR operator with the other flags in this table that either query or
                    access registry values.
                </para>
                <para>Windows 2000:  This flag is not supported.</para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_ALL_ACCESS">
            <summary>
                Combines the <see cref="F:PInvoke.Kernel32.ACCESS_MASK.StandardRight.STANDARD_RIGHTS_REQUIRED" />, <see cref="F:PInvoke.AdvApi32.KEY_QUERY_VALUE" />,
                <see cref="F:PInvoke.AdvApi32.KEY_SET_VALUE" />, <see cref="F:PInvoke.AdvApi32.KEY_CREATE_SUB_KEY" />, <see cref="F:PInvoke.AdvApi32.KEY_ENUMERATE_SUB_KEYS" />,
                <see cref="F:PInvoke.AdvApi32.KEY_NOTIFY" />, and <see cref="F:PInvoke.AdvApi32.KEY_CREATE_LINK" /> access rights.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_READ">
            <summary>
                Combines the <see cref="F:PInvoke.Kernel32.ACCESS_MASK.StandardRight.STANDARD_RIGHTS_READ" />, <see cref="F:PInvoke.AdvApi32.KEY_QUERY_VALUE" />,
                <see cref="F:PInvoke.AdvApi32.KEY_ENUMERATE_SUB_KEYS" />, and <see cref="F:PInvoke.AdvApi32.KEY_NOTIFY" /> values.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_WRITE">
            <summary>
                Combines the <see cref="F:PInvoke.Kernel32.ACCESS_MASK.StandardRight.STANDARD_RIGHTS_WRITE" />, <see cref="F:PInvoke.AdvApi32.KEY_SET_VALUE" />, and
                <see cref="F:PInvoke.AdvApi32.KEY_CREATE_SUB_KEY" /> access rights.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.KEY_EXECUTE">
            <summary>Equivalent to <see cref="F:PInvoke.AdvApi32.KEY_READ" />.</summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_CLASSES_ROOT">
            <summary>
                Registry entries subordinate to this key define types (or classes) of documents and the properties associated with
                those types. Shell and COM applications use the information stored under this key.
                <para>
                    This key also provides backward compatibility with the Windows 3.1 registration database by storing
                    information for DDE and OLE support. File viewers and user interface extensions store their OLE class
                    identifiers in HKEY_CLASSES_ROOT, and in-process servers are registered in this key.
                </para>
                <para>This handle should not be used in a service or an application that impersonates different users.</para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_CURRENT_USER">
            <summary>
                Registry entries subordinate to this key define the preferences of the current user. These preferences include the
                settings of environment variables, data about program groups, colors, printers, network connections, and
                application preferences. This key makes it easier to establish the current user's settings; the key maps to the
                current user's branch in <see cref="F:PInvoke.AdvApi32.HKEY_USERS" />. In HKEY_CURRENT_USER, software vendors store the current
                user-specific preferences to be used within their applications. Microsoft, for example, creates the
                <code>HKEY_CURRENT_USER\Software\Microsoft</code> key for its applications to use, with each application creating
                its own subkey under the <code>Microsoft</code> key.
                <para>
                    The mapping between HKEY_CURRENT_USER and <see cref="F:PInvoke.AdvApi32.HKEY_USERS" /> is per process and is established the
                    first time the process references HKEY_CURRENT_USER. The mapping is based on the security context of the first
                    thread to reference HKEY_CURRENT_USER. If this security context does not have a registry hive loaded in
                    <see cref="F:PInvoke.AdvApi32.HKEY_USERS" />, the mapping is established with <code>HKEY_USERS\.Default</code>. After this mapping
                    is established it persists, even if the security context of the thread changes.
                </para>
                <para>
                    All registry entries in HKEY_CURRENT_USER except those under <code>HKEY_CURRENT_USER\Software\Classes</code>
                    are included in the per-user registry portion of a roaming user profile. To exclude other entries from a
                    roaming user profile, store them in <see cref="F:PInvoke.AdvApi32.HKEY_CURRENT_USER_LOCAL_SETTINGS" />.
                </para>
                <para>
                    This handle should not be used in a service or an application that impersonates different users. Instead,
                    call the RegOpenCurrentUser function.
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_LOCAL_MACHINE">
            <summary>
                Registry entries subordinate to this key define the physical state of the computer, including data about the
                bus type, system memory, and installed hardware and software. It contains subkeys that hold current configuration
                data, including Plug and Play information (the Enum branch, which includes a complete list of all hardware that has
                ever been on the system), network logon preferences, network security information, software-related information
                (such as server names and the location of the server), and other system information.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_USERS">
            <summary>
                Registry entries subordinate to this key define the default user configuration for new users on the local
                computer and the user configuration for the current user.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_PERFORMANCE_DATA">
            <summary>
                Registry entries subordinate to this key allow you to access performance data. The data is not actually stored
                in the registry; the registry functions cause the system to collect the data from its source.
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_PERFORMANCE_TEXT">
            <summary>
                Registry entries subordinate to this key reference the text strings that describe counters in US English.
                These entries are not available to Regedit.exe and Regedt32.exe.
                <para>Windows 2000: This key is not supported.</para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_PERFORMANCE_NLSTEXT">
            <summary>
                Registry entries subordinate to this key reference the text strings that describe counters in the local
                language of the area in which the computer system is running. These entries are not available to Regedit.exe and
                Regedt32.exe.
                <para>Windows 2000: This key is not supported.</para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_CURRENT_CONFIG">
            <summary>
                Contains information about the current hardware profile of the local computer system. The information under
                HKEY_CURRENT_CONFIG describes only the differences between the current hardware configuration and
                the standard configuration. Information about the standard hardware configuration is stored under the Software and
                System keys of <see cref="F:PInvoke.AdvApi32.HKEY_LOCAL_MACHINE"/>.
                <para>
                    HKEY_CURRENT_CONFIG is an alias for
                    <code>HKEY_LOCAL_MACHINE\System\CurrentControlSet\Hardware Profiles\Current</code>.
                </para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_DYN_DATA">
            <summary>
                Contains information about hardware, Plug &amp; Play and network performance statistics.
                <para>Only available on Windows 95, Windows 98 and Windows ME</para>
            </summary>
        </member>
        <member name="F:PInvoke.AdvApi32.HKEY_CURRENT_USER_LOCAL_SETTINGS">
            <summary>
                Registry entries subordinate to this key define preferences of the current user that are local to the machine.
                These entries are not included in the per-user registry portion of a roaming user profile.
                <para>
                    Windows Server 2008, Windows Vista, Windows Server 2003, and Windows XP/2000: This key is supported starting
                    with Windows 7 and Windows Server 2008 R2.
                </para>
            </summary>
        </member>
        <member name="M:PInvoke.AdvApi32.ChangeServiceConfig2(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceInfoLevel,System.IntPtr)">
            <summary>
            Changes the optional configuration parameters of a service.
            </summary>
            <param name = "hService">
            A handle to the service.
            This handle is returned by the <see cref = "M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> or <see cref = "M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> function and
            must have the <see cref = "F:PInvoke.AdvApi32.ServiceAccess.SERVICE_CHANGE_CONFIG"/> access right.
            </param>
            <param name = "dwInfoLevel">
            The configuration information to be changed.
            This parameter can be one value from <see cref = "T:PInvoke.AdvApi32.ServiceStartType"/>.
            </param>
            <param name = "lpInfo">
            A pointer to the new value to be set for the configuration information.
            The format of this data depends on the value of the <paramref name = "dwInfoLevel"/> parameter.
            If this value is NULL, the information remains unchanged.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.IntPtr,System.Int32@,System.UInt32)">
            <summary>
            Retrieves parameters that govern the operations of a cryptographic service provider (CSP).
            </summary>
            <param name = "hProv">A handle of the CSP target of the query. This handle must have been created by using the CryptAcquireContext function.</param>
            <param name = "dwParam">The nature of the query.</param>
            <param name = "pbData">
            A pointer to a buffer to receive the data. The form of this data varies depending on the value of <paramref name = "dwFlags"/>.
            When <paramref name = "dwFlags"/> is set to <see cref = "F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_USE_HARDWARE_RNG"/>, <paramref name = "pbData"/> must be set to NULL.
            This parameter can be NULL to set the size of this information for memory allocation purposes.
            </param>
            <param name = "pdwDataLen">
            A pointer to a DWORD value that specifies the size, in bytes, of the buffer pointed to by the <paramref name = "pbData"/> parameter.
            When the function returns, the DWORD value contains the number of bytes stored or to be stored in the buffer.
            </param>
            <param name = "dwFlags">
            If <paramref name = "dwParam"/> is <see cref = "F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, the security descriptor on the key container where the keys are stored is retrieved.
            For this case, <paramref name = "dwFlags"/> is used to pass in the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags that indicate the requested security information,
            as defined in the Platform SDK. <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags can be combined with a bitwise-OR operation.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.Nullable{System.Byte}@,System.Int32@,System.UInt32)">
            <summary>
            Retrieves parameters that govern the operations of a cryptographic service provider (CSP).
            </summary>
            <param name = "hProv">A handle of the CSP target of the query. This handle must have been created by using the CryptAcquireContext function.</param>
            <param name = "dwParam">The nature of the query.</param>
            <param name = "pbData">
            A pointer to a buffer to receive the data. The form of this data varies depending on the value of <paramref name = "dwFlags"/>.
            When <paramref name = "dwFlags"/> is set to <see cref = "F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_USE_HARDWARE_RNG"/>, <paramref name = "pbData"/> must be set to NULL.
            This parameter can be NULL to set the size of this information for memory allocation purposes.
            </param>
            <param name = "pdwDataLen">
            A pointer to a DWORD value that specifies the size, in bytes, of the buffer pointed to by the <paramref name = "pbData"/> parameter.
            When the function returns, the DWORD value contains the number of bytes stored or to be stored in the buffer.
            </param>
            <param name = "dwFlags">
            If <paramref name = "dwParam"/> is <see cref = "F:PInvoke.AdvApi32.CryptGetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, the security descriptor on the key container where the keys are stored is retrieved.
            For this case, <paramref name = "dwFlags"/> is used to pass in the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags that indicate the requested security information,
            as defined in the Platform SDK. <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags can be combined with a bitwise-OR operation.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptSetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptSetProvParamQuery,System.IntPtr,System.UInt32)">
            <summary>
            Customizes the operations of a cryptographic service provider (CSP). This function is commonly used to set a security descriptor on the key container associated with a CSP to control access to the private keys in that key container.
            </summary>
            <param name = "hProv">The handle of a CSP for which to set values. This handle must have already been created by using the CryptAcquireContext function.</param>
            <param name = "dwParam">Specifies the parameter to set.</param>
            <param name = "pbData">
            A pointer to a data buffer that contains the value to be set as a provider parameter.
            The form of this data varies depending on the dwParam value. If dwFlags contains <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_USE_HARDWARE_RNG"/>, this parameter must be NULL.
            </param>
            <param name = "dwFlags">
            If <paramref name = "dwFlags"/> contains <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, <paramref name = "dwFlags"/> contains the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> applicable bit flags, as defined in the Platform SDK.
            Key-container security is handled by using SetFileSecurity and GetFileSecurity.
            These bit flags can be combined by using a bitwise-OR operation.For more information, see <see cref = "M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.Byte*,System.Int32@,System.UInt32)"/>.
            If dwParam is <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_USE_HARDWARE_RNG"/> or <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_DELETEKEY"/>, <paramref name = "dwFlags"/> must be set to zero.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptSetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptSetProvParamQuery,System.Nullable{System.Byte},System.UInt32)">
            <summary>
            Customizes the operations of a cryptographic service provider (CSP). This function is commonly used to set a security descriptor on the key container associated with a CSP to control access to the private keys in that key container.
            </summary>
            <param name = "hProv">The handle of a CSP for which to set values. This handle must have already been created by using the CryptAcquireContext function.</param>
            <param name = "dwParam">Specifies the parameter to set.</param>
            <param name = "pbData">
            A pointer to a data buffer that contains the value to be set as a provider parameter.
            The form of this data varies depending on the dwParam value. If dwFlags contains <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_USE_HARDWARE_RNG"/>, this parameter must be NULL.
            </param>
            <param name = "dwFlags">
            If <paramref name = "dwFlags"/> contains <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_KEYSET_SEC_DESCR"/>, <paramref name = "dwFlags"/> contains the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> applicable bit flags, as defined in the Platform SDK.
            Key-container security is handled by using SetFileSecurity and GetFileSecurity.
            These bit flags can be combined by using a bitwise-OR operation.For more information, see <see cref = "M:PInvoke.AdvApi32.CryptGetProvParam(System.Runtime.InteropServices.SafeHandle,PInvoke.AdvApi32.CryptGetProvParamQuery,System.Byte*,System.Int32@,System.UInt32)"/>.
            If dwParam is <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_USE_HARDWARE_RNG"/> or <see cref = "F:PInvoke.AdvApi32.CryptSetProvParamQuery.PP_DELETEKEY"/>, <paramref name = "dwFlags"/> must be set to zero.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetTokenInformation(PInvoke.Kernel32.SafeObjectHandle,PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
                The GetTokenInformation function retrieves a specified type of information about an access token. The calling
                process must have appropriate access rights to obtain the information.
                <para>
                    To determine if a user is a member of a specific group, use the CheckTokenMembership function. To determine
                    group membership for app container tokens, use the CheckTokenMembershipEx function.
                </para>
            </summary>
            <param name = "TokenHandle">
                A handle to an access token from which information is retrieved. If TokenInformationClass
                specifies TokenSource, the handle must have TOKEN_QUERY_SOURCE access. For all other TokenInformationClass values,
                the handle must have TOKEN_QUERY access.
            </param>
            <param name = "TokenInformationClass">
                Specifies a value from the TOKEN_INFORMATION_CLASS enumerated type to identify the
                type of information the function retrieves. Any callers who check the TokenIsAppContainer and have it return 0
                should also verify that the caller token is not an identify level impersonation token. If the current token is not
                an app container but is an identity level token, you should return AccessDenied.
            </param>
            <param name = "TokenInformation">
                A pointer to a buffer the function fills with the requested information. The structure
                put into this buffer depends upon the type of information specified by the
                <paramref name = "TokenInformationClass"/> parameter.
            </param>
            <param name = "TokenInformationLength">
                Specifies the size, in bytes, of the buffer pointed to by the TokenInformation
                parameter. If <paramref name = "TokenInformation"/> is NULL, this parameter must be zero.
            </param>
            <param name = "ReturnLength">
                A pointer to a variable that receives the number of bytes needed for the buffer pointed to by the TokenInformation
                parameter. If this value is larger than the value specified in the TokenInformationLength parameter, the function
                fails and stores no data in the buffer.
                <para>
                    If the value of the <paramref name = "TokenInformationClass"/> parameter is
                    <see cref = "F:PInvoke.AdvApi32.TOKEN_INFORMATION_CLASS.TokenDefaultDacl"/> and the token has no default DACL, the function sets
                    the variable pointed to by ReturnLength to sizeof(TOKEN_DEFAULT_DACL) and sets the DefaultDacl member of the
                    TOKEN_DEFAULT_DACL structure to NULL.
                </para>
            </param>
            <returns>
                If the function succeeds, the return value is a nonzero value.
                <para>
                    If the function fails, the return value is zero. To get extended error information, call
                    <see cref = "M:PInvoke.Kernel32.GetLastError"/>.
                </para>
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.IntPtr,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Enumerates services in the specified service control manager database.
            The name and status of each service are provided.
            This function has been superseded by the EnumServicesStatusEx function.
            It returns the same information <see cref = "M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.Byte*,System.Int32,System.Int32@,System.Int32@,System.Int32@)"/> returns, plus the process identifier and additional information for the service.
            In addition, EnumServicesStatusEx enables you to enumerate services that belong to a specified group.
            </summary>
            <param name = "hSCManager">
            A handle to the service control manager database.
            This handle is returned by the <see cref = "M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function, and must have the <see cref = "F:PInvoke.AdvApi32.ServiceManagerAccess.SC_MANAGER_ENUMERATE_SERVICE"/> access right.
            </param>
            <param name = "dwServiceType">
            The type of services to be enumerated.
            This parameter can be one or more of the following values.
            <list type = "bullet">
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_DRIVER"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_FILE_SYSTEM_DRIVER"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_KERNEL_DRIVER"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS"/>
            </item>
            </list>
            </param>
            <param name = "dwServiceState">
            The state of the services to be enumerated.
            This parameter can be one of the following values.
            <list type = "bullet">
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_ACTIVE"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_INACTIVE"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_STATE_ALL"/>
            </item>
            </list>
            </param>
            <param name = "lpServices">
            A pointer to a buffer that contains an array of <see cref = "T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS"/> structures that receive the name and service status information for each service in the database.
            The buffer must be large enough to hold the structures, plus the strings to which their members point.
            The maximum size of this array is 256K bytes.
            To determine the required size, specify NULL for this parameter and 0 for the <paramref name = "cbBufSize"/> parameter.
            The function will fail and <see cref = "M:PInvoke.Kernel32.GetLastError"/> will return <see cref = "F:PInvoke.Win32ErrorCode.ERROR_INSUFFICIENT_BUFFER"/>.
            The <paramref name = "pcbBytesNeeded"/> parameter will receive the required size.
            Windows Server 2003 and Windows XP:  The maximum size of this array is 64K bytes.
            This limit was increased as of Windows Server 2003 with SP1 and Windows XP with SP2.
            </param>
            <param name = "cbBufSize">
            The size of the buffer pointed to by the <paramref name = "lpServices"/> parameter, in bytes.
            </param>
            <param name = "pcbBytesNeeded">
            A pointer to a variable that receives the number of bytes needed to return the remaining service entries, if the buffer is too small.
            </param>
            <param name = "lpServicesReturned">
            A pointer to a variable that receives the number of service entries returned.
            </param>
            <param name = "lpResumeHandle">
            A pointer to a variable that, on input, specifies the starting point of enumeration.
            You must set this value to zero the first time this function is called. On output, this value is zero if the function succeeds.
            However, if the function returns zero and the <see cref = "M:PInvoke.Kernel32.GetLastError"/> function returns <see cref = "F:PInvoke.Win32ErrorCode.ERROR_MORE_DATA"/>,
            this value is used to indicate the next service entry to be read when the function is called to retrieve the additional data.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call <see cref = "M:PInvoke.Kernel32.GetLastError"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.Byte[],System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Enumerates services in the specified service control manager database.
            The name and status of each service are provided.
            This function has been superseded by the EnumServicesStatusEx function.
            It returns the same information <see cref = "M:PInvoke.AdvApi32.EnumServicesStatus(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStateQuery,System.Byte*,System.Int32,System.Int32@,System.Int32@,System.Int32@)"/> returns, plus the process identifier and additional information for the service.
            In addition, EnumServicesStatusEx enables you to enumerate services that belong to a specified group.
            </summary>
            <param name = "hSCManager">
            A handle to the service control manager database.
            This handle is returned by the <see cref = "M:PInvoke.AdvApi32.OpenSCManager(System.String,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function, and must have the <see cref = "F:PInvoke.AdvApi32.ServiceManagerAccess.SC_MANAGER_ENUMERATE_SERVICE"/> access right.
            </param>
            <param name = "dwServiceType">
            The type of services to be enumerated.
            This parameter can be one or more of the following values.
            <list type = "bullet">
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_DRIVER"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_FILE_SYSTEM_DRIVER"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_KERNEL_DRIVER"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_OWN_PROCESS"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceType.SERVICE_WIN32_SHARE_PROCESS"/>
            </item>
            </list>
            </param>
            <param name = "dwServiceState">
            The state of the services to be enumerated.
            This parameter can be one of the following values.
            <list type = "bullet">
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_ACTIVE"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_INACTIVE"/>
            </item>
            <item>
            <see cref = "F:PInvoke.AdvApi32.ServiceStateQuery.SERVICE_STATE_ALL"/>
            </item>
            </list>
            </param>
            <param name = "lpServices">
            A pointer to a buffer that contains an array of <see cref = "T:PInvoke.AdvApi32.ENUM_SERVICE_STATUS"/> structures that receive the name and service status information for each service in the database.
            The buffer must be large enough to hold the structures, plus the strings to which their members point.
            The maximum size of this array is 256K bytes.
            To determine the required size, specify NULL for this parameter and 0 for the <paramref name = "cbBufSize"/> parameter.
            The function will fail and <see cref = "M:PInvoke.Kernel32.GetLastError"/> will return <see cref = "F:PInvoke.Win32ErrorCode.ERROR_INSUFFICIENT_BUFFER"/>.
            The <paramref name = "pcbBytesNeeded"/> parameter will receive the required size.
            Windows Server 2003 and Windows XP:  The maximum size of this array is 64K bytes.
            This limit was increased as of Windows Server 2003 with SP1 and Windows XP with SP2.
            </param>
            <param name = "cbBufSize">
            The size of the buffer pointed to by the <paramref name = "lpServices"/> parameter, in bytes.
            </param>
            <param name = "pcbBytesNeeded">
            A pointer to a variable that receives the number of bytes needed to return the remaining service entries, if the buffer is too small.
            </param>
            <param name = "lpServicesReturned">
            A pointer to a variable that receives the number of service entries returned.
            </param>
            <param name = "lpResumeHandle">
            A pointer to a variable that, on input, specifies the starting point of enumeration.
            You must set this value to zero the first time this function is called. On output, this value is zero if the function succeeds.
            However, if the function returns zero and the <see cref = "M:PInvoke.Kernel32.GetLastError"/> function returns <see cref = "F:PInvoke.Win32ErrorCode.ERROR_MORE_DATA"/>,
            this value is used to indicate the next service entry to be read when the function is called to retrieve the additional data.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call <see cref = "M:PInvoke.Kernel32.GetLastError"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.QueryServiceStatusEx(PInvoke.AdvApi32.SafeServiceHandle,PInvoke.AdvApi32.SC_STATUS_TYPE,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Retrieves the current status of the specified service based on the specified information level.
            </summary>
            <param name = "hService">
            A handle to the service. This handle is returned by the <see cref = "M:PInvoke.AdvApi32.CreateService(PInvoke.AdvApi32.SafeServiceHandle,System.String,System.String,PInvoke.Kernel32.ACCESS_MASK,PInvoke.AdvApi32.ServiceType,PInvoke.AdvApi32.ServiceStartType,PInvoke.AdvApi32.ServiceErrorControl,System.String,System.String,System.Int32,System.String,System.String,System.String)"/> or <see cref = "M:PInvoke.AdvApi32.OpenService(PInvoke.AdvApi32.SafeServiceHandle,System.String,PInvoke.Kernel32.ACCESS_MASK)"/> function, and it must have the <see cref = "F:PInvoke.AdvApi32.ServiceAccess.SERVICE_QUERY_STATUS"/> access right. For more information, see Service Security and Access Rights.
            </param>
            <param name = "InfoLevel">
            The service attributes to be returned. Use <see cref = "F:PInvoke.AdvApi32.SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO"/> to retrieve the service status information.
            The <paramref name = "lpBuffer"/> parameter is a pointer to a <see cref = "T:PInvoke.AdvApi32.SERVICE_STATUS_PROCESS"/> structure.</param>
            <param name = "lpBuffer">
            A pointer to the buffer that receives the status information. The format of this data depends on the value of the <paramref name = "InfoLevel"/> parameter.
            The maximum size of this array is 8K bytes. To determine the required size, specify NULL for this parameter and 0 for the <paramref name = "cbBufSize"/> parameter.The function will fail and <see cref = "M:PInvoke.Kernel32.GetLastError"/> will return ERROR_INSUFFICIENT_BUFFER.The <paramref name = "pcbBytesNeeded"/> parameter will receive the required size.
            </param>
            <param name = "cbBufSize">
            The size of the buffer pointed to by the <paramref name = "lpBuffer"/> parameter, in bytes.
            </param>
            <param name = "pcbBytesNeeded">
            A pointer to a variable that receives the number of bytes needed to store all status information, if the function fails with <see cref = "F:PInvoke.Win32ErrorCode.ERROR_INSUFFICIENT_BUFFER"/>.
            </param>
            <returns>
            If the function succeeds, the return value is nonzero.
            If the function fails, the return value is zero. To get extended error information, call <see cref = "M:PInvoke.Kernel32.GetLastError"/>.
            </returns>
        </member>
        <member name="M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.IntPtr)">
            <summary>
            Registers a function to handle extended service control requests.
            </summary>
            <param name = "lpServiceName">
            The name of the service run by the calling thread. This is the service name that the service control program specified in the CreateService function when creating the service.
            </param>
            <param name = "lpHandlerProc">A reference to the handler function to be registered.</param>
            <param name = "lpContext">Any user-defined data. This parameter, which is passed to the handler function, can help identify the service when multiple services share a process.</param>
            <returns>If the function succeeds, the return value is a service status handle If the function fails, the return value is zero. </returns>
            <remarks>
            This function has been superseded by the <see cref = "M:PInvoke.AdvApi32.RegisterServiceCtrlHandlerEx(System.String,PInvoke.AdvApi32.LPHANDLER_FUNCTION_EX,System.Void*)"/> function.
            A service can use either function, but the new function supports user-defined context data, and the new handler function supports additional extended control codes.
            </remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.GetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr@,System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.
            </summary>
            <param name = "handle">A handle to the object from which to retrieve security information.</param>
            <param name = "ObjectType">SE_OBJECT_TYPE enumeration value that indicates the type of object.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name = "ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name = "ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name = "ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name = "ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name = "ppsidOwner"/>, <paramref name = "ppsidGroup"/>, <paramref name = "ppDacl"/>, or <paramref name = "ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr@,System.IntPtr@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.SECURITY_DESCRIPTOR}@)">
            <summary>
            The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.
            </summary>
            <param name = "handle">A handle to the object from which to retrieve security information.</param>
            <param name = "ObjectType">SE_OBJECT_TYPE enumeration value that indicates the type of object.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name = "ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name = "ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name = "ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name = "ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name = "ppsidOwner"/>, <paramref name = "ppsidGroup"/>, <paramref name = "ppDacl"/>, or <paramref name = "ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.SECURITY_DESCRIPTOR}@)">
            <summary>
            The GetSecurityInfo function retrieves a copy of the security descriptor for an object specified by a handle.
            </summary>
            <param name = "handle">A handle to the object from which to retrieve security information.</param>
            <param name = "ObjectType">SE_OBJECT_TYPE enumeration value that indicates the type of object.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name = "ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name = "ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name = "ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name = "ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name = "ppsidOwner"/>, <paramref name = "ppsidGroup"/>, <paramref name = "ppDacl"/>, or <paramref name = "ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr@,System.IntPtr@,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.
            </summary>
            <param name = "pObjectName">Specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name = "ObjectType">Specifies a value from the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name = "pObjectName"/> parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name = "ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name = "ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name = "ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name = "ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name = "ppsidOwner"/>, <paramref name = "ppsidGroup"/>, <paramref name = "ppDacl"/>, or <paramref name = "ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr@,System.IntPtr@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.SECURITY_DESCRIPTOR}@)">
            <summary>
            The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.
            </summary>
            <param name = "pObjectName">Specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name = "ObjectType">Specifies a value from the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name = "pObjectName"/> parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name = "ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name = "ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name = "ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name = "ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name = "ppsidOwner"/>, <paramref name = "ppsidGroup"/>, <paramref name = "ppDacl"/>, or <paramref name = "ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.GetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*@,System.Void*@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.SECURITY_DESCRIPTOR}@)">
            <summary>
            The GetNamedSecurityInfo function retrieves a copy of the security descriptor for an object specified by name.
            </summary>
            <param name = "pObjectName">Specifies the name of the object from which to retrieve security information. For descriptions of the string formats for the different object types, see <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name = "ObjectType">Specifies a value from the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name = "pObjectName"/> parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to retrieve. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "ppsidOwner">A pointer to a variable that receives a pointer to the owner SID in the security descriptor returned in ppSecurityDescriptor or NULL if the security descriptor has no owner SID. The returned pointer is valid only if you set the OWNER_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the owner SID.</param>
            <param name = "ppsidGroup">A pointer to a variable that receives a pointer to the primary group SID in the returned security descriptor or NULL if the security descriptor has no group SID. The returned pointer is valid only if you set the GROUP_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the group SID.</param>
            <param name = "ppDacl">A pointer to a variable that receives a pointer to the DACL in the returned security descriptor or NULL if the security descriptor has no DACL. The returned pointer is valid only if you set the DACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the DACL.</param>
            <param name = "ppSacl">A pointer to a variable that receives a pointer to the SACL in the returned security descriptor or NULL if the security descriptor has no SACL. The returned pointer is valid only if you set the SACL_SECURITY_INFORMATION flag. Also, this parameter can be NULL if you do not need the SACL.</param>
            <param name = "ppSecurityDescriptor">
            A pointer to a variable that receives a pointer to the security descriptor of the object. When you have finished using the pointer, free the returned buffer by calling the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.
            This parameter is required if any one of the <paramref name = "ppsidOwner"/>, <paramref name = "ppsidGroup"/>, <paramref name = "ppDacl"/>, or <paramref name = "ppSacl"/> parameters is not NULL.
            </param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.
            To set the SACL of an object, the caller must have the SE_SECURITY_NAME privilege enabled.
            </summary>
            <param name = "handle">A handle to the object for which to set security information.</param>
            <param name = "ObjectType">A member of the SE_OBJECT_TYPE enumeration that indicates the type of object identified by the handle parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name = "psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name = "pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name = "pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr,System.IntPtr,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@)">
            <summary>
            The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.
            To set the SACL of an object, the caller must have the SE_SECURITY_NAME privilege enabled.
            </summary>
            <param name = "handle">A handle to the object for which to set security information.</param>
            <param name = "ObjectType">A member of the SE_OBJECT_TYPE enumeration that indicates the type of object identified by the handle parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name = "psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name = "pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name = "pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetSecurityInfo(System.IntPtr,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@)">
            <summary>
            The SetSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.
            To set the SACL of an object, the caller must have the SE_SECURITY_NAME privilege enabled.
            </summary>
            <param name = "handle">A handle to the object for which to set security information.</param>
            <param name = "ObjectType">A member of the SE_OBJECT_TYPE enumeration that indicates the type of object identified by the handle parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name = "psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name = "pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name = "pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.
            </summary>
            <param name = "pObjectName">Specifies the name of the object from which to set security information. For descriptions of the string formats for the different object types, see <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name = "ObjectType">Specifies a value from the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name = "pObjectName"/> parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name = "psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name = "pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name = "pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.IntPtr,System.IntPtr,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@)">
            <summary>
            The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.
            </summary>
            <param name = "pObjectName">Specifies the name of the object from which to set security information. For descriptions of the string formats for the different object types, see <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name = "ObjectType">Specifies a value from the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name = "pObjectName"/> parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name = "psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name = "pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name = "pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.SetNamedSecurityInfo(System.String,PInvoke.AdvApi32.SE_OBJECT_TYPE,PInvoke.AdvApi32.SECURITY_INFORMATION,System.Void*,System.Void*,System.Nullable{PInvoke.Kernel32.ACL}@,System.Nullable{PInvoke.Kernel32.ACL}@)">
            <summary>
            The SetNamedSecurityInfo function sets specified security information in the security descriptor of a specified object. The caller identifies the object by name.
            </summary>
            <param name = "pObjectName">Specifies the name of the object from which to set security information. For descriptions of the string formats for the different object types, see <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/>.</param>
            <param name = "ObjectType">Specifies a value from the <see cref = "T:PInvoke.AdvApi32.SE_OBJECT_TYPE"/> enumeration that indicates the type of object named by the <paramref name = "pObjectName"/> parameter.</param>
            <param name = "SecurityInfo">A set of bit flags that indicate the type of security information to set. This parameter can be a combination of the <see cref = "T:PInvoke.AdvApi32.SECURITY_INFORMATION"/> bit flags.</param>
            <param name = "psidOwner">A pointer to a SID structure that identifies the owner of the object. If the caller does not have the SeRestorePrivilege constant (see Privilege Constants), this SID must be contained in the caller's token, and must have the SE_GROUP_OWNER permission enabled. The SecurityInfo parameter must include the OWNER_SECURITY_INFORMATION flag. To set the owner, the caller must have WRITE_OWNER access to the object or have the SE_TAKE_OWNERSHIP_NAME privilege enabled. If you are not setting the owner SID, this parameter can be NULL.</param>
            <param name = "psidGroup">A pointer to a SID that identifies the primary group of the object. The SecurityInfo parameter must include the GROUP_SECURITY_INFORMATION flag. If you are not setting the primary group SID, this parameter can be NULL.</param>
            <param name = "pDacl">A pointer to the new DACL for the object. The SecurityInfo parameter must include the DACL_SECURITY_INFORMATION flag. The caller must have WRITE_DAC access to the object or be the owner of the object. If you are not setting the DACL, this parameter can be NULL.</param>
            <param name = "pSacl">A pointer to the new SACL for the object. The SecurityInfo parameter must include any of the following flags: SACL_SECURITY_INFORMATION, LABEL_SECURITY_INFORMATION, ATTRIBUTE_SECURITY_INFORMATION, SCOPE_SECURITY_INFORMATION, or BACKUP_SECURITY_INFORMATION.</param>
            <returns>If the function succeeds, the return value is <see cref = "F:PInvoke.Win32ErrorCode.ERROR_SUCCESS"/>, otherwise it return one of the default error codes.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.DuplicateTokenEx(PInvoke.Kernel32.SafeObjectHandle,PInvoke.Kernel32.ACCESS_MASK,System.IntPtr,PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL,PInvoke.AdvApi32.TOKEN_TYPE,PInvoke.Kernel32.SafeObjectHandle@)">
            <summary>
            The DuplicateTokenEx function creates a new access token that duplicates an existing token.
            This function can create either a primary token or an impersonation token.
            </summary>
            <param name = "hExistingToken">A handle to an access token opened with <see cref = "F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_DUPLICATE"/>
            access.</param>
            <param name = "dwDesiredAccess">Specifies the requested access rights for the new token. The <see cref = "M:PInvoke.AdvApi32.DuplicateTokenEx(PInvoke.Kernel32.SafeObjectHandle,PInvoke.Kernel32.ACCESS_MASK,PInvoke.Kernel32.SECURITY_ATTRIBUTES*,PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL,PInvoke.AdvApi32.TOKEN_TYPE,PInvoke.Kernel32.SafeObjectHandle@)"/> function
            compares the requested access rights with the existing token's discretionary access control list (DACL) to determine
            which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request
            all access rights that are valid for the caller, specify <see cref = "F:PInvoke.Kernel32.ACCESS_MASK.SpecialRight.MAXIMUM_ALLOWED"/>.</param>
            <param name = "lpTokenAttributes">A pointer to a <see cref = "T:PInvoke.Kernel32.SECURITY_ATTRIBUTES"/> structure that specifies a security
            descriptor for the new token and determines whether child processes can inherit the token.
            If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited.
            If the security descriptor contains a system access control list (SACL), the token gets
            <see cref = "F:PInvoke.Kernel32.ACCESS_MASK.SpecialRight.ACCESS_SYSTEM_SECURITY"/> access right, even if it was not requested in dwDesiredAccess.
            To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME
            privilege set.</param>
            <param name = "ImpersonationLevel">Specifies a value from the <see cref = "T:PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL"/>
            enumeration that indicates the impersonation level of the new token.</param>
            <param name = "TokenType">pecifies one of the following values from the <see cref = "T:PInvoke.AdvApi32.TOKEN_TYPE"/> enumeration.</param>
            <param name = "phNewToken">A pointer to a <see cref = "T:PInvoke.Kernel32.SafeObjectHandle"/> variable that receives the new token.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref = "M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.DuplicateTokenEx(PInvoke.Kernel32.SafeObjectHandle,PInvoke.Kernel32.ACCESS_MASK,System.Nullable{PInvoke.Kernel32.SECURITY_ATTRIBUTES},PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL,PInvoke.AdvApi32.TOKEN_TYPE,PInvoke.Kernel32.SafeObjectHandle@)">
            <summary>
            The DuplicateTokenEx function creates a new access token that duplicates an existing token.
            This function can create either a primary token or an impersonation token.
            </summary>
            <param name = "hExistingToken">A handle to an access token opened with <see cref = "F:PInvoke.AdvApi32.TokenAccessRights.TOKEN_DUPLICATE"/>
            access.</param>
            <param name = "dwDesiredAccess">Specifies the requested access rights for the new token. The <see cref = "M:PInvoke.AdvApi32.DuplicateTokenEx(PInvoke.Kernel32.SafeObjectHandle,PInvoke.Kernel32.ACCESS_MASK,PInvoke.Kernel32.SECURITY_ATTRIBUTES*,PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL,PInvoke.AdvApi32.TOKEN_TYPE,PInvoke.Kernel32.SafeObjectHandle@)"/> function
            compares the requested access rights with the existing token's discretionary access control list (DACL) to determine
            which rights are granted or denied. To request the same access rights as the existing token, specify zero. To request
            all access rights that are valid for the caller, specify <see cref = "F:PInvoke.Kernel32.ACCESS_MASK.SpecialRight.MAXIMUM_ALLOWED"/>.</param>
            <param name = "lpTokenAttributes">A pointer to a <see cref = "T:PInvoke.Kernel32.SECURITY_ATTRIBUTES"/> structure that specifies a security
            descriptor for the new token and determines whether child processes can inherit the token.
            If lpTokenAttributes is NULL, the token gets a default security descriptor and the handle cannot be inherited.
            If the security descriptor contains a system access control list (SACL), the token gets
            <see cref = "F:PInvoke.Kernel32.ACCESS_MASK.SpecialRight.ACCESS_SYSTEM_SECURITY"/> access right, even if it was not requested in dwDesiredAccess.
            To set the owner in the security descriptor for the new token, the caller's process token must have the SE_RESTORE_NAME
            privilege set.</param>
            <param name = "ImpersonationLevel">Specifies a value from the <see cref = "T:PInvoke.Kernel32.SECURITY_IMPERSONATION_LEVEL"/>
            enumeration that indicates the impersonation level of the new token.</param>
            <param name = "TokenType">pecifies one of the following values from the <see cref = "T:PInvoke.AdvApi32.TOKEN_TYPE"/> enumeration.</param>
            <param name = "phNewToken">A pointer to a <see cref = "T:PInvoke.Kernel32.SafeObjectHandle"/> variable that receives the new token.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref = "M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.IntPtr,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)">
            <summary>
            The <see cref = "M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> function adds data to a specified hash object.
            This function and CryptHashSessionKey can be called multiple times to compute the hash of long or discontinuous data streams.
            </summary>
            <param name = "hHash">Handle of the hash object.</param>
            <param name = "pbData">A pointer to a buffer that contains the data to be added to the hash object.</param>
            <param name = "dataLen">Number of bytes of data to be added. This must be zero if the <see cref = "F:PInvoke.AdvApi32.CryptHashDataFlags.CRYPT_USERDATA"/> flag is set.</param>
            <param name = "flags">Hashing flags</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref = "M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte[],System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)">
            <summary>
            The <see cref = "M:PInvoke.AdvApi32.CryptHashData(PInvoke.AdvApi32.SafeHashHandle,System.Byte*,System.Int32,PInvoke.AdvApi32.CryptHashDataFlags)"/> function adds data to a specified hash object.
            This function and CryptHashSessionKey can be called multiple times to compute the hash of long or discontinuous data streams.
            </summary>
            <param name = "hHash">Handle of the hash object.</param>
            <param name = "pbData">A pointer to a buffer that contains the data to be added to the hash object.</param>
            <param name = "dataLen">Number of bytes of data to be added. This must be zero if the <see cref = "F:PInvoke.AdvApi32.CryptHashDataFlags.CRYPT_USERDATA"/> flag is set.</param>
            <param name = "flags">Hashing flags</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref = "M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetHashParam(PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptGetHashParamFlags,System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
                Get parameters of a hash
            </summary>
            <param name = "hHash">Handle of the hash object to be queried.</param>
            <param name = "dwParam">Query type.</param>
            <param name = "pbData">
            A pointer to a buffer that receives the specified value data. The form of this data varies, depending on the value number.
            This parameter can be NULL to determine the memory size required.
            </param>
            <param name = "pdwDataLen">
            A pointer to a DWORD value specifying the size, in bytes, of the <paramref name = "pbData"/> buffer. When the function returns, the DWORD value contains the number of bytes stored in the buffer.
            If <paramref name = "pbData"/> is NULL, set the value of <paramref name = "pdwDataLen"/> to zero.
            </param>
            <param name = "dwFlags">Reserved for future use and must be zero.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref = "M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.CryptGetHashParam(PInvoke.AdvApi32.SafeHashHandle,PInvoke.AdvApi32.CryptGetHashParamFlags,System.Byte[],System.Int32@,System.UInt32)">
            <summary>
                Get parameters of a hash
            </summary>
            <param name = "hHash">Handle of the hash object to be queried.</param>
            <param name = "dwParam">Query type.</param>
            <param name = "pbData">
            A pointer to a buffer that receives the specified value data. The form of this data varies, depending on the value number.
            This parameter can be NULL to determine the memory size required.
            </param>
            <param name = "pdwDataLen">
            A pointer to a DWORD value specifying the size, in bytes, of the <paramref name = "pbData"/> buffer. When the function returns, the DWORD value contains the number of bytes stored in the buffer.
            If <paramref name = "pbData"/> is NULL, set the value of <paramref name = "pdwDataLen"/> to zero.
            </param>
            <param name = "dwFlags">Reserved for future use and must be zero.</param>
            <returns>If the function succeeds, the function returns a nonzero value.
            If the function fails, it returns zero.To get extended error information, call <see cref = "M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</returns>
        </member>
        <member name="M:PInvoke.AdvApi32.ConvertSidToStringSid(System.IntPtr,System.IntPtr@)">
            <summary>
            The ConvertSidToStringSid function converts a security identifier (SID) to a string format suitable for display, storage, or transmission.
            To convert the string-format SID back to a valid, functional SID, call the <see cref = "M:PInvoke.AdvApi32.ConvertStringSidToSid(System.String,System.Void*@)"/> function.
            </summary>
            <param name = "sid">A pointer to the SID structure to be converted.</param>
            <param name = "sidString">A pointer to a variable that receives a pointer to a null-terminated SID string. To free the returned buffer, call the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.</param>
            <returns>If the function succeeds, the return value is true, otherwise the return value is false.</returns>
            <remarks>The ConvertSidToStringSid function uses the standard S-R-I-S-S… format for SID strings.</remarks>
        </member>
        <member name="M:PInvoke.AdvApi32.ConvertStringSidToSid(System.String,System.IntPtr@)">
            <summary>
            The ConvertStringSidToSid function converts a string-format security identifier (SID) into a valid, functional SID.
            You can use this function to retrieve a SID that the <see cref = "M:PInvoke.AdvApi32.ConvertSidToStringSid(System.IntPtr,System.Char*@)"/> function converted to string format.
            </summary>
            <param name = "StringSid">The string-format SID to convert. The SID string can use either the standard S-R-I-S-S… format for SID strings, or the SID string constant format, such as "BA" for built-in administrators.</param>
            <param name = "sid">A pointer to a variable that receives a pointer to the converted SID. To free the returned buffer, call the <see cref = "M:PInvoke.Kernel32.LocalFree(System.Void*)"/> function.</param>
            <returns>If the function succeeds, the return value is true, otherwise the return value is false.</returns>
        </member>
    </members>
</doc>
